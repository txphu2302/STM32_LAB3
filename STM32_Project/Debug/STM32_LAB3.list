
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e8  080033e8  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080033e8  080033e8  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e8  080033e8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000050  08003440  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08003440  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ac2  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e85  00000000  00000000  00029b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171fe  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc8e  00000000  00000000  0004407e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082792  00000000  00000000  00050d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d349e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  000d34f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080033ac 	.word	0x080033ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080033ac 	.word	0x080033ac

0800014c <isButton1Pressed>:
int TimeOutForKeyPress = 200;
int button_pressed[3];
int button_flag[3];

int isButton1Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button_flag[0] == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
	{
		button_flag[0] = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000088 	.word	0x20000088

08000170 <isButton2Pressed>:

int isButton2Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button_flag[1] == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
	{
		button_flag[1] = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButton3Pressed>:


int isButton3Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button_flag[2] == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	689b      	ldr	r3, [r3, #8]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
	{
		button_flag[2] = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	609a      	str	r2, [r3, #8]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000088 	.word	0x20000088

080001b8 <subkeyProcess>:


void subkeyProcess(int index)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index] = 1;
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <subkeyProcess+0x1c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2101      	movs	r1, #1
 80001c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001ca:	bf00      	nop
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	20000088 	.word	0x20000088

080001d8 <getKeyInput>:

void getKeyInput()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e083      	b.n	80002ec <getKeyInput+0x114>
	{
		KeyReg2[i] = KeyReg1[i];
 80001e4:	4a46      	ldr	r2, [pc, #280]	; (8000300 <getKeyInput+0x128>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4945      	ldr	r1, [pc, #276]	; (8000304 <getKeyInput+0x12c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001f4:	4a44      	ldr	r2, [pc, #272]	; (8000308 <getKeyInput+0x130>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4940      	ldr	r1, [pc, #256]	; (8000300 <getKeyInput+0x128>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0) KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10b      	bne.n	8000222 <getKeyInput+0x4a>
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	483f      	ldr	r0, [pc, #252]	; (800030c <getKeyInput+0x134>)
 8000210:	f002 f8a0 	bl	8002354 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	4619      	mov	r1, r3
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <getKeyInput+0x130>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000220:	e019      	b.n	8000256 <getKeyInput+0x7e>
		else if (i == 1) KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d10b      	bne.n	8000240 <getKeyInput+0x68>
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	4837      	ldr	r0, [pc, #220]	; (800030c <getKeyInput+0x134>)
 800022e:	f002 f891 	bl	8002354 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	4619      	mov	r1, r3
 8000236:	4a34      	ldr	r2, [pc, #208]	; (8000308 <getKeyInput+0x130>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023e:	e00a      	b.n	8000256 <getKeyInput+0x7e>
		else KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000244:	4831      	ldr	r0, [pc, #196]	; (800030c <getKeyInput+0x134>)
 8000246:	f002 f885 	bl	8002354 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	4619      	mov	r1, r3
 800024e:	4a2e      	ldr	r2, [pc, #184]	; (8000308 <getKeyInput+0x130>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i]))
 8000256:	4a2a      	ldr	r2, [pc, #168]	; (8000300 <getKeyInput+0x128>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	492a      	ldr	r1, [pc, #168]	; (8000308 <getKeyInput+0x130>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d13d      	bne.n	80002e6 <getKeyInput+0x10e>
 800026a:	4a25      	ldr	r2, [pc, #148]	; (8000300 <getKeyInput+0x128>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	4924      	ldr	r1, [pc, #144]	; (8000304 <getKeyInput+0x12c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d133      	bne.n	80002e6 <getKeyInput+0x10e>
		{
			if (KeyReg2[i] != KeyReg3[i])
 800027e:	4a21      	ldr	r2, [pc, #132]	; (8000304 <getKeyInput+0x12c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4922      	ldr	r1, [pc, #136]	; (8000310 <getKeyInput+0x138>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d014      	beq.n	80002bc <getKeyInput+0xe4>
			{
				KeyReg3[i] = KeyReg2[i];
 8000292:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <getKeyInput+0x12c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	491d      	ldr	r1, [pc, #116]	; (8000310 <getKeyInput+0x138>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE)
 80002a2:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <getKeyInput+0x138>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d11b      	bne.n	80002e6 <getKeyInput+0x10e>
				{
					subkeyProcess(i);
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff82 	bl	80001b8 <subkeyProcess>
					TimeOutForKeyPress = 200;
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <getKeyInput+0x13c>)
 80002b6:	22c8      	movs	r2, #200	; 0xc8
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e014      	b.n	80002e6 <getKeyInput+0x10e>
				}
			}
			else
			{
				TimeOutForKeyPress--;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <getKeyInput+0x13c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a14      	ldr	r2, [pc, #80]	; (8000314 <getKeyInput+0x13c>)
 80002c4:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0)
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <getKeyInput+0x13c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d10b      	bne.n	80002e6 <getKeyInput+0x10e>
				{
					if (KeyReg3[i] == PRESSED_STATE)
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <getKeyInput+0x138>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d102      	bne.n	80002e0 <getKeyInput+0x108>
					{
						subkeyProcess(i);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ff6c 	bl	80001b8 <subkeyProcess>
					}
					TimeOutForKeyPress = 50;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <getKeyInput+0x13c>)
 80002e2:	2232      	movs	r2, #50	; 0x32
 80002e4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3301      	adds	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	f77f af78 	ble.w	80001e4 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000018 	.word	0x20000018
 8000308:	20000000 	.word	0x20000000
 800030c:	40010800 	.word	0x40010800
 8000310:	20000024 	.word	0x20000024
 8000314:	20000030 	.word	0x20000030

08000318 <auto_red_green>:

int substatus = 0;
int tempdec_red, tempdec_amber, tempdec_green;

void auto_red_green()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	RedGreen();
 800031c:	f001 fc6a 	bl	8001bf4 <RedGreen>
	if (timer1_flag == 1)
 8000320:	4b46      	ldr	r3, [pc, #280]	; (800043c <auto_red_green+0x124>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d117      	bne.n	8000358 <auto_red_green+0x40>
	{
		status = AUTO_RED_AMBER;
 8000328:	4b45      	ldr	r3, [pc, #276]	; (8000440 <auto_red_green+0x128>)
 800032a:	2203      	movs	r2, #3
 800032c:	601a      	str	r2, [r3, #0]
		setTimer1(amber * 1000);
 800032e:	4b45      	ldr	r3, [pc, #276]	; (8000444 <auto_red_green+0x12c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000336:	fb02 f303 	mul.w	r3, r2, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fb20 	bl	8001980 <setTimer1>
		timer2_flag = 1;
 8000340:	4b41      	ldr	r3, [pc, #260]	; (8000448 <auto_red_green+0x130>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
		tempdec_red--;
 8000346:	4b41      	ldr	r3, [pc, #260]	; (800044c <auto_red_green+0x134>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a3f      	ldr	r2, [pc, #252]	; (800044c <auto_red_green+0x134>)
 800034e:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 8000350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000354:	f001 fb48 	bl	80019e8 <setTimer3>
	}
	if (timer2_flag == 1)
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <auto_red_green+0x130>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d149      	bne.n	80003f4 <auto_red_green+0xdc>
	{
		setTimer2(250);
 8000360:	20fa      	movs	r0, #250	; 0xfa
 8000362:	f001 fb27 	bl	80019b4 <setTimer2>
		switch(substatus)
 8000366:	4b3a      	ldr	r3, [pc, #232]	; (8000450 <auto_red_green+0x138>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d002      	beq.n	8000374 <auto_red_green+0x5c>
 800036e:	2b01      	cmp	r3, #1
 8000370:	d01c      	beq.n	80003ac <auto_red_green+0x94>
				display7SEG_2(tempdec_red % 10, 1);
				display7SEG(tempdec_green % 10, 1);
				substatus = 0;
				break;
			default:
				break;
 8000372:	e040      	b.n	80003f6 <auto_red_green+0xde>
				display7SEG_2(tempdec_red / 10, 0);
 8000374:	4b35      	ldr	r3, [pc, #212]	; (800044c <auto_red_green+0x134>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a36      	ldr	r2, [pc, #216]	; (8000454 <auto_red_green+0x13c>)
 800037a:	fb82 1203 	smull	r1, r2, r2, r3
 800037e:	1092      	asrs	r2, r2, #2
 8000380:	17db      	asrs	r3, r3, #31
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fe46 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_green / 10, 0);
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <auto_red_green+0x140>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a30      	ldr	r2, [pc, #192]	; (8000454 <auto_red_green+0x13c>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	1092      	asrs	r2, r2, #2
 8000398:	17db      	asrs	r3, r3, #31
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fc7a 	bl	8000c98 <display7SEG>
				substatus = 1;
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <auto_red_green+0x138>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
				break;
 80003aa:	e024      	b.n	80003f6 <auto_red_green+0xde>
				display7SEG_2(tempdec_red % 10, 1);
 80003ac:	4b27      	ldr	r3, [pc, #156]	; (800044c <auto_red_green+0x134>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <auto_red_green+0x13c>)
 80003b2:	fb83 1302 	smull	r1, r3, r3, r2
 80003b6:	1099      	asrs	r1, r3, #2
 80003b8:	17d3      	asrs	r3, r2, #31
 80003ba:	1ac8      	subs	r0, r1, r3
 80003bc:	4603      	mov	r3, r0
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4403      	add	r3, r0
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	1ad0      	subs	r0, r2, r3
 80003c6:	2101      	movs	r1, #1
 80003c8:	f000 fe26 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_green % 10, 1);
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <auto_red_green+0x140>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b20      	ldr	r3, [pc, #128]	; (8000454 <auto_red_green+0x13c>)
 80003d2:	fb83 1302 	smull	r1, r3, r3, r2
 80003d6:	1099      	asrs	r1, r3, #2
 80003d8:	17d3      	asrs	r3, r2, #31
 80003da:	1ac8      	subs	r0, r1, r3
 80003dc:	4603      	mov	r3, r0
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4403      	add	r3, r0
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	1ad0      	subs	r0, r2, r3
 80003e6:	2101      	movs	r1, #1
 80003e8:	f000 fc56 	bl	8000c98 <display7SEG>
				substatus = 0;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <auto_red_green+0x138>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
				break;
 80003f2:	e000      	b.n	80003f6 <auto_red_green+0xde>
		}

	}
 80003f4:	bf00      	nop
	if (timer3_flag == 1)
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <auto_red_green+0x144>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d10d      	bne.n	800041a <auto_red_green+0x102>
	{
		setTimer3(1000);
 80003fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000402:	f001 faf1 	bl	80019e8 <setTimer3>
		tempdec_red--;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <auto_red_green+0x134>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <auto_red_green+0x134>)
 800040e:	6013      	str	r3, [r2, #0]
		tempdec_green--;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <auto_red_green+0x140>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	4a10      	ldr	r2, [pc, #64]	; (8000458 <auto_red_green+0x140>)
 8000418:	6013      	str	r3, [r2, #0]
	}

	if (isButton1Pressed() == 1)
 800041a:	f7ff fe97 	bl	800014c <isButton1Pressed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b01      	cmp	r3, #1
 8000422:	d108      	bne.n	8000436 <auto_red_green+0x11e>
	{
		status = MODE_2;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <auto_red_green+0x128>)
 8000426:	220d      	movs	r2, #13
 8000428:	601a      	str	r2, [r3, #0]
		OffLight();
 800042a:	f001 fbbb 	bl	8001ba4 <OffLight>
		setTimer1(10000);
 800042e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000432:	f001 faa5 	bl	8001980 <setTimer1>
	}
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000007c 	.word	0x2000007c
 8000440:	20000074 	.word	0x20000074
 8000444:	200000ac 	.word	0x200000ac
 8000448:	20000080 	.word	0x20000080
 800044c:	200000a0 	.word	0x200000a0
 8000450:	2000006c 	.word	0x2000006c
 8000454:	66666667 	.word	0x66666667
 8000458:	200000a4 	.word	0x200000a4
 800045c:	20000084 	.word	0x20000084

08000460 <auto_red_amber>:

void auto_red_amber()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	RedAmber();
 8000464:	f001 fbee 	bl	8001c44 <RedAmber>
	if (timer1_flag == 1)
 8000468:	4b4b      	ldr	r3, [pc, #300]	; (8000598 <auto_red_amber+0x138>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d11e      	bne.n	80004ae <auto_red_amber+0x4e>
	{
		status = AUTO_GREEN_RED;
 8000470:	4b4a      	ldr	r3, [pc, #296]	; (800059c <auto_red_amber+0x13c>)
 8000472:	2204      	movs	r2, #4
 8000474:	601a      	str	r2, [r3, #0]
		setTimer1(green * 1000);
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <auto_red_amber+0x140>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fa7c 	bl	8001980 <setTimer1>
		timer2_flag = 1;
 8000488:	4b46      	ldr	r3, [pc, #280]	; (80005a4 <auto_red_amber+0x144>)
 800048a:	2201      	movs	r2, #1
 800048c:	601a      	str	r2, [r3, #0]
		setTimer3(1000);
 800048e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000492:	f001 faa9 	bl	80019e8 <setTimer3>
		tempdec_red = red;
 8000496:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <auto_red_amber+0x148>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a44      	ldr	r2, [pc, #272]	; (80005ac <auto_red_amber+0x14c>)
 800049c:	6013      	str	r3, [r2, #0]
		tempdec_green = green;
 800049e:	4b40      	ldr	r3, [pc, #256]	; (80005a0 <auto_red_amber+0x140>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a43      	ldr	r2, [pc, #268]	; (80005b0 <auto_red_amber+0x150>)
 80004a4:	6013      	str	r3, [r2, #0]
		tempdec_amber = amber;
 80004a6:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <auto_red_amber+0x154>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a43      	ldr	r2, [pc, #268]	; (80005b8 <auto_red_amber+0x158>)
 80004ac:	6013      	str	r3, [r2, #0]
	}
	if (timer2_flag == 1)
 80004ae:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <auto_red_amber+0x144>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d149      	bne.n	800054a <auto_red_amber+0xea>
	{
		setTimer2(250);
 80004b6:	20fa      	movs	r0, #250	; 0xfa
 80004b8:	f001 fa7c 	bl	80019b4 <setTimer2>
		switch(substatus)
 80004bc:	4b3f      	ldr	r3, [pc, #252]	; (80005bc <auto_red_amber+0x15c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <auto_red_amber+0x6a>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d01c      	beq.n	8000502 <auto_red_amber+0xa2>
				display7SEG_2(tempdec_red % 10, 1);
				display7SEG(tempdec_amber % 10, 1);
				substatus = 0;
				break;
			default:
				break;
 80004c8:	e040      	b.n	800054c <auto_red_amber+0xec>
				display7SEG_2(tempdec_red / 10, 0);
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <auto_red_amber+0x14c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a3c      	ldr	r2, [pc, #240]	; (80005c0 <auto_red_amber+0x160>)
 80004d0:	fb82 1203 	smull	r1, r2, r2, r3
 80004d4:	1092      	asrs	r2, r2, #2
 80004d6:	17db      	asrs	r3, r3, #31
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fd9b 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_amber / 10, 0);
 80004e2:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <auto_red_amber+0x158>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a36      	ldr	r2, [pc, #216]	; (80005c0 <auto_red_amber+0x160>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	1092      	asrs	r2, r2, #2
 80004ee:	17db      	asrs	r3, r3, #31
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fbcf 	bl	8000c98 <display7SEG>
				substatus = 1;
 80004fa:	4b30      	ldr	r3, [pc, #192]	; (80005bc <auto_red_amber+0x15c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
				break;
 8000500:	e024      	b.n	800054c <auto_red_amber+0xec>
				display7SEG_2(tempdec_red % 10, 1);
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <auto_red_amber+0x14c>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <auto_red_amber+0x160>)
 8000508:	fb83 1302 	smull	r1, r3, r3, r2
 800050c:	1099      	asrs	r1, r3, #2
 800050e:	17d3      	asrs	r3, r2, #31
 8000510:	1ac8      	subs	r0, r1, r3
 8000512:	4603      	mov	r3, r0
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4403      	add	r3, r0
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	1ad0      	subs	r0, r2, r3
 800051c:	2101      	movs	r1, #1
 800051e:	f000 fd7b 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_amber % 10, 1);
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <auto_red_amber+0x158>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <auto_red_amber+0x160>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1099      	asrs	r1, r3, #2
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac8      	subs	r0, r1, r3
 8000532:	4603      	mov	r3, r0
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4403      	add	r3, r0
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1ad0      	subs	r0, r2, r3
 800053c:	2101      	movs	r1, #1
 800053e:	f000 fbab 	bl	8000c98 <display7SEG>
				substatus = 0;
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <auto_red_amber+0x15c>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
				break;
 8000548:	e000      	b.n	800054c <auto_red_amber+0xec>
		}

	}
 800054a:	bf00      	nop
	if (timer3_flag == 1)
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <auto_red_amber+0x164>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d110      	bne.n	8000576 <auto_red_amber+0x116>
	{
		setTimer3(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f001 fa46 	bl	80019e8 <setTimer3>
		timer2_flag = 1;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <auto_red_amber+0x144>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
		tempdec_red--;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <auto_red_amber+0x14c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3b01      	subs	r3, #1
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <auto_red_amber+0x14c>)
 800056a:	6013      	str	r3, [r2, #0]
		tempdec_amber--;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <auto_red_amber+0x158>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <auto_red_amber+0x158>)
 8000574:	6013      	str	r3, [r2, #0]
	}
	if (isButton1Pressed() == 1)
 8000576:	f7ff fde9 	bl	800014c <isButton1Pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d108      	bne.n	8000592 <auto_red_amber+0x132>
	{
		status = MODE_2;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <auto_red_amber+0x13c>)
 8000582:	220d      	movs	r2, #13
 8000584:	601a      	str	r2, [r3, #0]
		OffLight();
 8000586:	f001 fb0d 	bl	8001ba4 <OffLight>
		setTimer1(10000);
 800058a:	f242 7010 	movw	r0, #10000	; 0x2710
 800058e:	f001 f9f7 	bl	8001980 <setTimer1>
	}
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c
 800059c:	20000074 	.word	0x20000074
 80005a0:	200000b0 	.word	0x200000b0
 80005a4:	20000080 	.word	0x20000080
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	200000a0 	.word	0x200000a0
 80005b0:	200000a4 	.word	0x200000a4
 80005b4:	200000ac 	.word	0x200000ac
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	2000006c 	.word	0x2000006c
 80005c0:	66666667 	.word	0x66666667
 80005c4:	20000084 	.word	0x20000084

080005c8 <auto_green_red>:

void auto_green_red()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	GreenRed();
 80005cc:	f001 fb62 	bl	8001c94 <GreenRed>
	if (timer1_flag == 1)
 80005d0:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <auto_green_red+0x11c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d114      	bne.n	8000602 <auto_green_red+0x3a>
	{
		status = AUTO_AMBER_RED;
 80005d8:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <auto_green_red+0x120>)
 80005da:	2205      	movs	r2, #5
 80005dc:	601a      	str	r2, [r3, #0]
		setTimer1(amber * 1000);
 80005de:	4b43      	ldr	r3, [pc, #268]	; (80006ec <auto_green_red+0x124>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f9c8 	bl	8001980 <setTimer1>
		tempdec_red--;
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <auto_green_red+0x128>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a3e      	ldr	r2, [pc, #248]	; (80006f0 <auto_green_red+0x128>)
 80005f8:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f001 f9f3 	bl	80019e8 <setTimer3>
	}
	if (timer2_flag == 1)
 8000602:	4b3c      	ldr	r3, [pc, #240]	; (80006f4 <auto_green_red+0x12c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d149      	bne.n	800069e <auto_green_red+0xd6>
	{
		setTimer2(250);
 800060a:	20fa      	movs	r0, #250	; 0xfa
 800060c:	f001 f9d2 	bl	80019b4 <setTimer2>
		switch(substatus)
 8000610:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <auto_green_red+0x130>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <auto_green_red+0x56>
 8000618:	2b01      	cmp	r3, #1
 800061a:	d01c      	beq.n	8000656 <auto_green_red+0x8e>
				display7SEG_2(tempdec_green % 10, 1);
				display7SEG(tempdec_red % 10, 1);
				substatus = 0;
				break;
			default:
				break;
 800061c:	e040      	b.n	80006a0 <auto_green_red+0xd8>
				display7SEG_2(tempdec_green / 10, 0);
 800061e:	4b37      	ldr	r3, [pc, #220]	; (80006fc <auto_green_red+0x134>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a37      	ldr	r2, [pc, #220]	; (8000700 <auto_green_red+0x138>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1092      	asrs	r2, r2, #2
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fcf1 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_red / 10, 0);
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <auto_green_red+0x128>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a31      	ldr	r2, [pc, #196]	; (8000700 <auto_green_red+0x138>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1092      	asrs	r2, r2, #2
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fb25 	bl	8000c98 <display7SEG>
				substatus = 1;
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <auto_green_red+0x130>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
				break;
 8000654:	e024      	b.n	80006a0 <auto_green_red+0xd8>
				display7SEG_2(tempdec_green % 10, 1);
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <auto_green_red+0x134>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <auto_green_red+0x138>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac8      	subs	r0, r1, r3
 8000666:	4603      	mov	r3, r0
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4403      	add	r3, r0
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad0      	subs	r0, r2, r3
 8000670:	2101      	movs	r1, #1
 8000672:	f000 fcd1 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_red % 10, 1);
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <auto_green_red+0x128>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <auto_green_red+0x138>)
 800067c:	fb83 1302 	smull	r1, r3, r3, r2
 8000680:	1099      	asrs	r1, r3, #2
 8000682:	17d3      	asrs	r3, r2, #31
 8000684:	1ac8      	subs	r0, r1, r3
 8000686:	4603      	mov	r3, r0
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4403      	add	r3, r0
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	1ad0      	subs	r0, r2, r3
 8000690:	2101      	movs	r1, #1
 8000692:	f000 fb01 	bl	8000c98 <display7SEG>
				substatus = 0;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <auto_green_red+0x130>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
				break;
 800069c:	e000      	b.n	80006a0 <auto_green_red+0xd8>
		}

	}
 800069e:	bf00      	nop
	if (timer3_flag == 1)
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <auto_green_red+0x13c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10d      	bne.n	80006c4 <auto_green_red+0xfc>
	{
		setTimer3(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f001 f99c 	bl	80019e8 <setTimer3>
		tempdec_red--;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <auto_green_red+0x128>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <auto_green_red+0x128>)
 80006b8:	6013      	str	r3, [r2, #0]
		tempdec_green--;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <auto_green_red+0x134>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <auto_green_red+0x134>)
 80006c2:	6013      	str	r3, [r2, #0]
	}
	if (isButton1Pressed() == 1)
 80006c4:	f7ff fd42 	bl	800014c <isButton1Pressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d108      	bne.n	80006e0 <auto_green_red+0x118>
	{
		status = MODE_2;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <auto_green_red+0x120>)
 80006d0:	220d      	movs	r2, #13
 80006d2:	601a      	str	r2, [r3, #0]
		OffLight();
 80006d4:	f001 fa66 	bl	8001ba4 <OffLight>
		setTimer1(10000);
 80006d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80006dc:	f001 f950 	bl	8001980 <setTimer1>
	}
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	20000074 	.word	0x20000074
 80006ec:	200000ac 	.word	0x200000ac
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	20000080 	.word	0x20000080
 80006f8:	2000006c 	.word	0x2000006c
 80006fc:	200000a4 	.word	0x200000a4
 8000700:	66666667 	.word	0x66666667
 8000704:	20000084 	.word	0x20000084

08000708 <auto_amber_red>:

void auto_amber_red()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	AmberRed();
 800070c:	f001 faea 	bl	8001ce4 <AmberRed>
	if (timer1_flag == 1)
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <auto_amber_red+0x130>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d11e      	bne.n	8000756 <auto_amber_red+0x4e>
	{
		status = AUTO_RED_GREEN;
 8000718:	4b48      	ldr	r3, [pc, #288]	; (800083c <auto_amber_red+0x134>)
 800071a:	2202      	movs	r2, #2
 800071c:	601a      	str	r2, [r3, #0]
		setTimer1(green * 1000);
 800071e:	4b48      	ldr	r3, [pc, #288]	; (8000840 <auto_amber_red+0x138>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f928 	bl	8001980 <setTimer1>
		timer2_flag = 1;
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <auto_amber_red+0x13c>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
		setTimer3(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f001 f955 	bl	80019e8 <setTimer3>
		tempdec_red = red;
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <auto_amber_red+0x140>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a42      	ldr	r2, [pc, #264]	; (800084c <auto_amber_red+0x144>)
 8000744:	6013      	str	r3, [r2, #0]
		tempdec_green = green;
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <auto_amber_red+0x138>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <auto_amber_red+0x148>)
 800074c:	6013      	str	r3, [r2, #0]
		tempdec_amber = amber;
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <auto_amber_red+0x14c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a41      	ldr	r2, [pc, #260]	; (8000858 <auto_amber_red+0x150>)
 8000754:	6013      	str	r3, [r2, #0]
	}
	if (timer2_flag == 1)
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <auto_amber_red+0x13c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d149      	bne.n	80007f2 <auto_amber_red+0xea>
	{
		setTimer2(250);
 800075e:	20fa      	movs	r0, #250	; 0xfa
 8000760:	f001 f928 	bl	80019b4 <setTimer2>
		switch(substatus)
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <auto_amber_red+0x154>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <auto_amber_red+0x6a>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d01c      	beq.n	80007aa <auto_amber_red+0xa2>
				display7SEG_2(tempdec_red % 10, 1);
				display7SEG(tempdec_amber % 10, 1);
				substatus = 0;
				break;
			default:
				break;
 8000770:	e040      	b.n	80007f4 <auto_amber_red+0xec>
				display7SEG_2(tempdec_red / 10, 0);
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <auto_amber_red+0x144>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <auto_amber_red+0x158>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1092      	asrs	r2, r2, #2
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fc47 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_amber / 10, 0);
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <auto_amber_red+0x150>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a34      	ldr	r2, [pc, #208]	; (8000860 <auto_amber_red+0x158>)
 8000790:	fb82 1203 	smull	r1, r2, r2, r3
 8000794:	1092      	asrs	r2, r2, #2
 8000796:	17db      	asrs	r3, r3, #31
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fa7b 	bl	8000c98 <display7SEG>
				substatus = 1;
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <auto_amber_red+0x154>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
				break;
 80007a8:	e024      	b.n	80007f4 <auto_amber_red+0xec>
				display7SEG_2(tempdec_red % 10, 1);
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <auto_amber_red+0x144>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <auto_amber_red+0x158>)
 80007b0:	fb83 1302 	smull	r1, r3, r3, r2
 80007b4:	1099      	asrs	r1, r3, #2
 80007b6:	17d3      	asrs	r3, r2, #31
 80007b8:	1ac8      	subs	r0, r1, r3
 80007ba:	4603      	mov	r3, r0
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4403      	add	r3, r0
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	1ad0      	subs	r0, r2, r3
 80007c4:	2101      	movs	r1, #1
 80007c6:	f000 fc27 	bl	8001018 <display7SEG_2>
				display7SEG(tempdec_amber % 10, 1);
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <auto_amber_red+0x150>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <auto_amber_red+0x158>)
 80007d0:	fb83 1302 	smull	r1, r3, r3, r2
 80007d4:	1099      	asrs	r1, r3, #2
 80007d6:	17d3      	asrs	r3, r2, #31
 80007d8:	1ac8      	subs	r0, r1, r3
 80007da:	4603      	mov	r3, r0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4403      	add	r3, r0
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	1ad0      	subs	r0, r2, r3
 80007e4:	2101      	movs	r1, #1
 80007e6:	f000 fa57 	bl	8000c98 <display7SEG>
				substatus = 0;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <auto_amber_red+0x154>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
				break;
 80007f0:	e000      	b.n	80007f4 <auto_amber_red+0xec>
		}

	}
 80007f2:	bf00      	nop
	if (timer3_flag == 1)
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <auto_amber_red+0x15c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10d      	bne.n	8000818 <auto_amber_red+0x110>
	{
		setTimer3(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000800:	f001 f8f2 	bl	80019e8 <setTimer3>
		tempdec_red--;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <auto_amber_red+0x144>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <auto_amber_red+0x144>)
 800080c:	6013      	str	r3, [r2, #0]
		tempdec_amber--;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <auto_amber_red+0x150>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3b01      	subs	r3, #1
 8000814:	4a10      	ldr	r2, [pc, #64]	; (8000858 <auto_amber_red+0x150>)
 8000816:	6013      	str	r3, [r2, #0]
	}
	if (isButton1Pressed() == 1)
 8000818:	f7ff fc98 	bl	800014c <isButton1Pressed>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d108      	bne.n	8000834 <auto_amber_red+0x12c>
	{
		status = MODE_2;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <auto_amber_red+0x134>)
 8000824:	220d      	movs	r2, #13
 8000826:	601a      	str	r2, [r3, #0]
		OffLight();
 8000828:	f001 f9bc 	bl	8001ba4 <OffLight>
		setTimer1(10000);
 800082c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000830:	f001 f8a6 	bl	8001980 <setTimer1>
	}
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000007c 	.word	0x2000007c
 800083c:	20000074 	.word	0x20000074
 8000840:	200000b0 	.word	0x200000b0
 8000844:	20000080 	.word	0x20000080
 8000848:	200000b4 	.word	0x200000b4
 800084c:	200000a0 	.word	0x200000a0
 8000850:	200000a4 	.word	0x200000a4
 8000854:	200000ac 	.word	0x200000ac
 8000858:	200000a8 	.word	0x200000a8
 800085c:	2000006c 	.word	0x2000006c
 8000860:	66666667 	.word	0x66666667
 8000864:	20000084 	.word	0x20000084

08000868 <fsm_automatic_run>:

void fsm_automatic_run()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	switch (status)
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <fsm_automatic_run+0x84>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b01      	subs	r3, #1
 8000872:	2b04      	cmp	r3, #4
 8000874:	d837      	bhi.n	80008e6 <fsm_automatic_run+0x7e>
 8000876:	a201      	add	r2, pc, #4	; (adr r2, 800087c <fsm_automatic_run+0x14>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	08000891 	.word	0x08000891
 8000880:	080008cf 	.word	0x080008cf
 8000884:	080008d5 	.word	0x080008d5
 8000888:	080008db 	.word	0x080008db
 800088c:	080008e1 	.word	0x080008e1
	{
		case INIT:
			status = AUTO_RED_GREEN;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <fsm_automatic_run+0x84>)
 8000892:	2202      	movs	r2, #2
 8000894:	601a      	str	r2, [r3, #0]
			OffLight();
 8000896:	f001 f985 	bl	8001ba4 <OffLight>
			setTimer1(green * 1000);
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <fsm_automatic_run+0x88>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f86a 	bl	8001980 <setTimer1>
			setTimer3(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f001 f89a 	bl	80019e8 <setTimer3>
			tempdec_red = red;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <fsm_automatic_run+0x8c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <fsm_automatic_run+0x90>)
 80008ba:	6013      	str	r3, [r2, #0]
			tempdec_amber = amber;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <fsm_automatic_run+0x94>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <fsm_automatic_run+0x98>)
 80008c2:	6013      	str	r3, [r2, #0]
			tempdec_green = green;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <fsm_automatic_run+0x88>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <fsm_automatic_run+0x9c>)
 80008ca:	6013      	str	r3, [r2, #0]
			break;
 80008cc:	e00c      	b.n	80008e8 <fsm_automatic_run+0x80>
		case AUTO_RED_GREEN:
			auto_red_green();
 80008ce:	f7ff fd23 	bl	8000318 <auto_red_green>
			break;
 80008d2:	e009      	b.n	80008e8 <fsm_automatic_run+0x80>
		case AUTO_RED_AMBER:
			auto_red_amber();
 80008d4:	f7ff fdc4 	bl	8000460 <auto_red_amber>
			break;
 80008d8:	e006      	b.n	80008e8 <fsm_automatic_run+0x80>
		case AUTO_GREEN_RED:
			auto_green_red();
 80008da:	f7ff fe75 	bl	80005c8 <auto_green_red>
			break;
 80008de:	e003      	b.n	80008e8 <fsm_automatic_run+0x80>
		case AUTO_AMBER_RED:
			auto_amber_red();
 80008e0:	f7ff ff12 	bl	8000708 <auto_amber_red>
			break;
 80008e4:	e000      	b.n	80008e8 <fsm_automatic_run+0x80>
		default:
			break;
 80008e6:	bf00      	nop
	}
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000074 	.word	0x20000074
 80008f0:	200000b0 	.word	0x200000b0
 80008f4:	200000b4 	.word	0x200000b4
 80008f8:	200000a0 	.word	0x200000a0
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	200000a8 	.word	0x200000a8
 8000904:	200000a4 	.word	0x200000a4

08000908 <blinking_mode_02>:
#include "fsm_manual.h"

int sub_status = 0;

void blinking_mode_02()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <blinking_mode_02+0x98>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d108      	bne.n	8000926 <blinking_mode_02+0x1e>
	{
		setTimer3(500);
 8000914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000918:	f001 f866 	bl	80019e8 <setTimer3>
		HAL_GPIO_TogglePin(GPIOA, LED_3_Pin | LED_4_Pin);
 800091c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <blinking_mode_02+0x9c>)
 8000922:	f001 fd46 	bl	80023b2 <HAL_GPIO_TogglePin>
	}
	if (timer2_flag == 1)
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <blinking_mode_02+0xa0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d135      	bne.n	800099a <blinking_mode_02+0x92>
	{
		setTimer2(250);
 800092e:	20fa      	movs	r0, #250	; 0xfa
 8000930:	f001 f840 	bl	80019b4 <setTimer2>
		switch(sub_status)
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <blinking_mode_02+0xa4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <blinking_mode_02+0x3a>
 800093c:	2b01      	cmp	r3, #1
 800093e:	d014      	beq.n	800096a <blinking_mode_02+0x62>
				display7SEG_2(red % 10, 1);
				display7SEG(2, 1);
				sub_status = 0;
				break;
			default:
				break;
 8000940:	e02c      	b.n	800099c <blinking_mode_02+0x94>
				display7SEG_2(red / 10, 0);
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <blinking_mode_02+0xa8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <blinking_mode_02+0xac>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	1092      	asrs	r2, r2, #2
 800094e:	17db      	asrs	r3, r3, #31
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fb5f 	bl	8001018 <display7SEG_2>
				display7SEG(0, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f99b 	bl	8000c98 <display7SEG>
				sub_status = 1;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <blinking_mode_02+0xa4>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
				break;
 8000968:	e018      	b.n	800099c <blinking_mode_02+0x94>
				display7SEG_2(red % 10, 1);
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <blinking_mode_02+0xa8>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <blinking_mode_02+0xac>)
 8000970:	fb83 1302 	smull	r1, r3, r3, r2
 8000974:	1099      	asrs	r1, r3, #2
 8000976:	17d3      	asrs	r3, r2, #31
 8000978:	1ac8      	subs	r0, r1, r3
 800097a:	4603      	mov	r3, r0
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4403      	add	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	1ad0      	subs	r0, r2, r3
 8000984:	2101      	movs	r1, #1
 8000986:	f000 fb47 	bl	8001018 <display7SEG_2>
				display7SEG(2, 1);
 800098a:	2101      	movs	r1, #1
 800098c:	2002      	movs	r0, #2
 800098e:	f000 f983 	bl	8000c98 <display7SEG>
				sub_status = 0;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <blinking_mode_02+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
				break;
 8000998:	e000      	b.n	800099c <blinking_mode_02+0x94>
		}

	}
 800099a:	bf00      	nop
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000084 	.word	0x20000084
 80009a4:	40010800 	.word	0x40010800
 80009a8:	20000080 	.word	0x20000080
 80009ac:	20000070 	.word	0x20000070
 80009b0:	200000b4 	.word	0x200000b4
 80009b4:	66666667 	.word	0x66666667

080009b8 <blinking_mode_03>:

void blinking_mode_03()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <blinking_mode_03+0x98>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d108      	bne.n	80009d6 <blinking_mode_03+0x1e>
	{
		setTimer3(500);
 80009c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c8:	f001 f80e 	bl	80019e8 <setTimer3>
		HAL_GPIO_TogglePin(GPIOA, LED_2_Pin | LED_5_Pin);
 80009cc:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80009d0:	4820      	ldr	r0, [pc, #128]	; (8000a54 <blinking_mode_03+0x9c>)
 80009d2:	f001 fcee 	bl	80023b2 <HAL_GPIO_TogglePin>
	}
	if (timer2_flag == 1)
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <blinking_mode_03+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d135      	bne.n	8000a4a <blinking_mode_03+0x92>
	{
		setTimer2(250);
 80009de:	20fa      	movs	r0, #250	; 0xfa
 80009e0:	f000 ffe8 	bl	80019b4 <setTimer2>
		switch(sub_status)
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <blinking_mode_03+0xa4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <blinking_mode_03+0x3a>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d014      	beq.n	8000a1a <blinking_mode_03+0x62>
				display7SEG_2(amber % 10, 1);
				display7SEG(3, 1);
				sub_status = 0;
				break;
			default:
				break;
 80009f0:	e02c      	b.n	8000a4c <blinking_mode_03+0x94>
				display7SEG_2(amber / 10, 0);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <blinking_mode_03+0xa8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <blinking_mode_03+0xac>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1092      	asrs	r2, r2, #2
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fb07 	bl	8001018 <display7SEG_2>
				display7SEG(0, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 f943 	bl	8000c98 <display7SEG>
				sub_status = 1;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <blinking_mode_03+0xa4>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
				break;
 8000a18:	e018      	b.n	8000a4c <blinking_mode_03+0x94>
				display7SEG_2(amber % 10, 1);
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <blinking_mode_03+0xa8>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <blinking_mode_03+0xac>)
 8000a20:	fb83 1302 	smull	r1, r3, r3, r2
 8000a24:	1099      	asrs	r1, r3, #2
 8000a26:	17d3      	asrs	r3, r2, #31
 8000a28:	1ac8      	subs	r0, r1, r3
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4403      	add	r3, r0
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	1ad0      	subs	r0, r2, r3
 8000a34:	2101      	movs	r1, #1
 8000a36:	f000 faef 	bl	8001018 <display7SEG_2>
				display7SEG(3, 1);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f92b 	bl	8000c98 <display7SEG>
				sub_status = 0;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <blinking_mode_03+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
				break;
 8000a48:	e000      	b.n	8000a4c <blinking_mode_03+0x94>
		}

	}
 8000a4a:	bf00      	nop
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000084 	.word	0x20000084
 8000a54:	40010800 	.word	0x40010800
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	20000070 	.word	0x20000070
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	66666667 	.word	0x66666667

08000a68 <blinking_mode_04>:

void blinking_mode_04()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <blinking_mode_04+0x98>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d108      	bne.n	8000a86 <blinking_mode_04+0x1e>
	{
		setTimer3(500);
 8000a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a78:	f000 ffb6 	bl	80019e8 <setTimer3>
		HAL_GPIO_TogglePin(GPIOA, LED_1_Pin | LED_6_Pin);
 8000a7c:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <blinking_mode_04+0x9c>)
 8000a82:	f001 fc96 	bl	80023b2 <HAL_GPIO_TogglePin>
	}
	if (timer2_flag == 1)
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <blinking_mode_04+0xa0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d135      	bne.n	8000afa <blinking_mode_04+0x92>
	{
		setTimer2(250);
 8000a8e:	20fa      	movs	r0, #250	; 0xfa
 8000a90:	f000 ff90 	bl	80019b4 <setTimer2>
		switch(sub_status)
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <blinking_mode_04+0xa4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <blinking_mode_04+0x3a>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d014      	beq.n	8000aca <blinking_mode_04+0x62>
				display7SEG_2(green % 10, 1);
				display7SEG(4, 1);
				sub_status = 0;
				break;
			default:
				break;
 8000aa0:	e02c      	b.n	8000afc <blinking_mode_04+0x94>
				display7SEG_2(green / 10, 0);
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <blinking_mode_04+0xa8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <blinking_mode_04+0xac>)
 8000aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aac:	1092      	asrs	r2, r2, #2
 8000aae:	17db      	asrs	r3, r3, #31
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 faaf 	bl	8001018 <display7SEG_2>
				display7SEG(0, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f8eb 	bl	8000c98 <display7SEG>
				sub_status = 1;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <blinking_mode_04+0xa4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
				break;
 8000ac8:	e018      	b.n	8000afc <blinking_mode_04+0x94>
				display7SEG_2(green % 10, 1);
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <blinking_mode_04+0xa8>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <blinking_mode_04+0xac>)
 8000ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad4:	1099      	asrs	r1, r3, #2
 8000ad6:	17d3      	asrs	r3, r2, #31
 8000ad8:	1ac8      	subs	r0, r1, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4403      	add	r3, r0
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	1ad0      	subs	r0, r2, r3
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	f000 fa97 	bl	8001018 <display7SEG_2>
				display7SEG(4, 1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	2004      	movs	r0, #4
 8000aee:	f000 f8d3 	bl	8000c98 <display7SEG>
				sub_status = 0;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <blinking_mode_04+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
				break;
 8000af8:	e000      	b.n	8000afc <blinking_mode_04+0x94>
		}

	}
 8000afa:	bf00      	nop
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000084 	.word	0x20000084
 8000b04:	40010800 	.word	0x40010800
 8000b08:	20000080 	.word	0x20000080
 8000b0c:	20000070 	.word	0x20000070
 8000b10:	200000b0 	.word	0x200000b0
 8000b14:	66666667 	.word	0x66666667

08000b18 <fsm_manual_run>:

void fsm_manual_run()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	switch (status)
 8000b1c:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <fsm_manual_run+0x144>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d063      	beq.n	8000bec <fsm_manual_run+0xd4>
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	f300 808f 	bgt.w	8000c48 <fsm_manual_run+0x130>
 8000b2a:	2b0d      	cmp	r3, #13
 8000b2c:	d002      	beq.n	8000b34 <fsm_manual_run+0x1c>
 8000b2e:	2b0e      	cmp	r3, #14
 8000b30:	d02e      	beq.n	8000b90 <fsm_manual_run+0x78>
		{
			status = INIT;
		}
		break;
	default:
		break;
 8000b32:	e089      	b.n	8000c48 <fsm_manual_run+0x130>
		blinking_mode_02();
 8000b34:	f7ff fee8 	bl	8000908 <blinking_mode_02>
		if (timer1_flag == 1)
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <fsm_manual_run+0x148>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d102      	bne.n	8000b46 <fsm_manual_run+0x2e>
			status = INIT;
 8000b40:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <fsm_manual_run+0x144>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1)
 8000b46:	f7ff fb01 	bl	800014c <isButton1Pressed>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d108      	bne.n	8000b62 <fsm_manual_run+0x4a>
			setTimer1(10000);
 8000b50:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b54:	f000 ff14 	bl	8001980 <setTimer1>
			OffLight();
 8000b58:	f001 f824 	bl	8001ba4 <OffLight>
			status = MODE_3;
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <fsm_manual_run+0x144>)
 8000b5e:	220e      	movs	r2, #14
 8000b60:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1)
 8000b62:	f7ff fb05 	bl	8000170 <isButton2Pressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <fsm_manual_run+0x66>
			setTimer1(10000);
 8000b6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b70:	f000 ff06 	bl	8001980 <setTimer1>
			red++;
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <fsm_manual_run+0x14c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <fsm_manual_run+0x14c>)
 8000b7c:	6013      	str	r3, [r2, #0]
		if (isButton3Pressed() == 1)
 8000b7e:	f7ff fb09 	bl	8000194 <isButton3Pressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d161      	bne.n	8000c4c <fsm_manual_run+0x134>
			status = INIT;
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <fsm_manual_run+0x144>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
		break;
 8000b8e:	e05d      	b.n	8000c4c <fsm_manual_run+0x134>
		blinking_mode_03();
 8000b90:	f7ff ff12 	bl	80009b8 <blinking_mode_03>
		if (timer1_flag == 1)
 8000b94:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <fsm_manual_run+0x148>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d102      	bne.n	8000ba2 <fsm_manual_run+0x8a>
			status = INIT;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <fsm_manual_run+0x144>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1)
 8000ba2:	f7ff fad3 	bl	800014c <isButton1Pressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <fsm_manual_run+0xa6>
			setTimer1(10000);
 8000bac:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bb0:	f000 fee6 	bl	8001980 <setTimer1>
			OffLight();
 8000bb4:	f000 fff6 	bl	8001ba4 <OffLight>
			status = MODE_4;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <fsm_manual_run+0x144>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1)
 8000bbe:	f7ff fad7 	bl	8000170 <isButton2Pressed>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d108      	bne.n	8000bda <fsm_manual_run+0xc2>
			setTimer1(10000);
 8000bc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bcc:	f000 fed8 	bl	8001980 <setTimer1>
			amber++;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <fsm_manual_run+0x150>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <fsm_manual_run+0x150>)
 8000bd8:	6013      	str	r3, [r2, #0]
		if (isButton3Pressed() == 1)
 8000bda:	f7ff fadb 	bl	8000194 <isButton3Pressed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d135      	bne.n	8000c50 <fsm_manual_run+0x138>
			status = INIT;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <fsm_manual_run+0x144>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
		break;
 8000bea:	e031      	b.n	8000c50 <fsm_manual_run+0x138>
		blinking_mode_04();
 8000bec:	f7ff ff3c 	bl	8000a68 <blinking_mode_04>
		if (timer1_flag == 1)
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <fsm_manual_run+0x148>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d102      	bne.n	8000bfe <fsm_manual_run+0xe6>
			status = INIT;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <fsm_manual_run+0x144>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1)
 8000bfe:	f7ff faa5 	bl	800014c <isButton1Pressed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d108      	bne.n	8000c1a <fsm_manual_run+0x102>
			setTimer1(10000);
 8000c08:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c0c:	f000 feb8 	bl	8001980 <setTimer1>
			OffLight();
 8000c10:	f000 ffc8 	bl	8001ba4 <OffLight>
			status = MODE_1;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <fsm_manual_run+0x144>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1)
 8000c1a:	f7ff faa9 	bl	8000170 <isButton2Pressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <fsm_manual_run+0x11e>
			setTimer1(10000);
 8000c24:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c28:	f000 feaa 	bl	8001980 <setTimer1>
			green++;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <fsm_manual_run+0x154>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <fsm_manual_run+0x154>)
 8000c34:	6013      	str	r3, [r2, #0]
		if (isButton3Pressed() == 1)
 8000c36:	f7ff faad 	bl	8000194 <isButton3Pressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d109      	bne.n	8000c54 <fsm_manual_run+0x13c>
			status = INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <fsm_manual_run+0x144>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
		break;
 8000c46:	e005      	b.n	8000c54 <fsm_manual_run+0x13c>
		break;
 8000c48:	bf00      	nop
 8000c4a:	e004      	b.n	8000c56 <fsm_manual_run+0x13e>
		break;
 8000c4c:	bf00      	nop
 8000c4e:	e002      	b.n	8000c56 <fsm_manual_run+0x13e>
		break;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <fsm_manual_run+0x13e>
		break;
 8000c54:	bf00      	nop
	}
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000074 	.word	0x20000074
 8000c60:	2000007c 	.word	0x2000007c
 8000c64:	200000b4 	.word	0x200000b4
 8000c68:	200000ac 	.word	0x200000ac
 8000c6c:	200000b0 	.word	0x200000b0

08000c70 <fsm_setting_run>:
 */

#include "fsm_setting.h"

void fsm_setting_run()
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	red = green + amber;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <fsm_setting_run+0x1c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <fsm_setting_run+0x20>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <fsm_setting_run+0x24>)
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	200000ac 	.word	0x200000ac
 8000c94:	200000b4 	.word	0x200000b4

08000c98 <display7SEG>:

#include "led7_segment.h"

int red, green, amber;
void display7SEG(int num, int substatus)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	if (substatus == 0)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d114      	bne.n	8000cd2 <display7SEG+0x3a>
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	48c2      	ldr	r0, [pc, #776]	; (8000fb8 <display7SEG+0x320>)
 8000cae:	f001 fb68 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	48c0      	ldr	r0, [pc, #768]	; (8000fb8 <display7SEG+0x320>)
 8000cb8:	f001 fb63 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	48bd      	ldr	r0, [pc, #756]	; (8000fb8 <display7SEG+0x320>)
 8000cc2:	f001 fb5e 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2110      	movs	r1, #16
 8000cca:	48bb      	ldr	r0, [pc, #748]	; (8000fb8 <display7SEG+0x320>)
 8000ccc:	f001 fb59 	bl	8002382 <HAL_GPIO_WritePin>
 8000cd0:	e013      	b.n	8000cfa <display7SEG+0x62>
	}
	else
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	48b8      	ldr	r0, [pc, #736]	; (8000fb8 <display7SEG+0x320>)
 8000cd8:	f001 fb53 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	48b5      	ldr	r0, [pc, #724]	; (8000fb8 <display7SEG+0x320>)
 8000ce2:	f001 fb4e 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2108      	movs	r1, #8
 8000cea:	48b3      	ldr	r0, [pc, #716]	; (8000fb8 <display7SEG+0x320>)
 8000cec:	f001 fb49 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	48b0      	ldr	r0, [pc, #704]	; (8000fb8 <display7SEG+0x320>)
 8000cf6:	f001 fb44 	bl	8002382 <HAL_GPIO_WritePin>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	f200 8183 	bhi.w	8001008 <display7SEG+0x370>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <display7SEG+0x70>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	08000d79 	.word	0x08000d79
 8000d10:	08000dc1 	.word	0x08000dc1
 8000d14:	08000e09 	.word	0x08000e09
 8000d18:	08000e51 	.word	0x08000e51
 8000d1c:	08000e99 	.word	0x08000e99
 8000d20:	08000ee1 	.word	0x08000ee1
 8000d24:	08000f29 	.word	0x08000f29
 8000d28:	08000f71 	.word	0x08000f71
 8000d2c:	08000fc1 	.word	0x08000fc1
	}
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	48a1      	ldr	r0, [pc, #644]	; (8000fbc <display7SEG+0x324>)
 8000d36:	f001 fb24 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	489f      	ldr	r0, [pc, #636]	; (8000fbc <display7SEG+0x324>)
 8000d40:	f001 fb1f 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2104      	movs	r1, #4
 8000d48:	489c      	ldr	r0, [pc, #624]	; (8000fbc <display7SEG+0x324>)
 8000d4a:	f001 fb1a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	489a      	ldr	r0, [pc, #616]	; (8000fbc <display7SEG+0x324>)
 8000d54:	f001 fb15 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4897      	ldr	r0, [pc, #604]	; (8000fbc <display7SEG+0x324>)
 8000d5e:	f001 fb10 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4895      	ldr	r0, [pc, #596]	; (8000fbc <display7SEG+0x324>)
 8000d68:	f001 fb0b 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	4892      	ldr	r0, [pc, #584]	; (8000fbc <display7SEG+0x324>)
 8000d72:	f001 fb06 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000d76:	e148      	b.n	800100a <display7SEG+0x372>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	488f      	ldr	r0, [pc, #572]	; (8000fbc <display7SEG+0x324>)
 8000d7e:	f001 fb00 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2102      	movs	r1, #2
 8000d86:	488d      	ldr	r0, [pc, #564]	; (8000fbc <display7SEG+0x324>)
 8000d88:	f001 fafb 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2104      	movs	r1, #4
 8000d90:	488a      	ldr	r0, [pc, #552]	; (8000fbc <display7SEG+0x324>)
 8000d92:	f001 faf6 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4888      	ldr	r0, [pc, #544]	; (8000fbc <display7SEG+0x324>)
 8000d9c:	f001 faf1 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4885      	ldr	r0, [pc, #532]	; (8000fbc <display7SEG+0x324>)
 8000da6:	f001 faec 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	4883      	ldr	r0, [pc, #524]	; (8000fbc <display7SEG+0x324>)
 8000db0:	f001 fae7 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4880      	ldr	r0, [pc, #512]	; (8000fbc <display7SEG+0x324>)
 8000dba:	f001 fae2 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000dbe:	e124      	b.n	800100a <display7SEG+0x372>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	487d      	ldr	r0, [pc, #500]	; (8000fbc <display7SEG+0x324>)
 8000dc6:	f001 fadc 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2102      	movs	r1, #2
 8000dce:	487b      	ldr	r0, [pc, #492]	; (8000fbc <display7SEG+0x324>)
 8000dd0:	f001 fad7 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4878      	ldr	r0, [pc, #480]	; (8000fbc <display7SEG+0x324>)
 8000dda:	f001 fad2 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2108      	movs	r1, #8
 8000de2:	4876      	ldr	r0, [pc, #472]	; (8000fbc <display7SEG+0x324>)
 8000de4:	f001 facd 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2110      	movs	r1, #16
 8000dec:	4873      	ldr	r0, [pc, #460]	; (8000fbc <display7SEG+0x324>)
 8000dee:	f001 fac8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2120      	movs	r1, #32
 8000df6:	4871      	ldr	r0, [pc, #452]	; (8000fbc <display7SEG+0x324>)
 8000df8:	f001 fac3 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	486e      	ldr	r0, [pc, #440]	; (8000fbc <display7SEG+0x324>)
 8000e02:	f001 fabe 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000e06:	e100      	b.n	800100a <display7SEG+0x372>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	486b      	ldr	r0, [pc, #428]	; (8000fbc <display7SEG+0x324>)
 8000e0e:	f001 fab8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2102      	movs	r1, #2
 8000e16:	4869      	ldr	r0, [pc, #420]	; (8000fbc <display7SEG+0x324>)
 8000e18:	f001 fab3 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4866      	ldr	r0, [pc, #408]	; (8000fbc <display7SEG+0x324>)
 8000e22:	f001 faae 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4864      	ldr	r0, [pc, #400]	; (8000fbc <display7SEG+0x324>)
 8000e2c:	f001 faa9 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	4861      	ldr	r0, [pc, #388]	; (8000fbc <display7SEG+0x324>)
 8000e36:	f001 faa4 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	485f      	ldr	r0, [pc, #380]	; (8000fbc <display7SEG+0x324>)
 8000e40:	f001 fa9f 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	485c      	ldr	r0, [pc, #368]	; (8000fbc <display7SEG+0x324>)
 8000e4a:	f001 fa9a 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000e4e:	e0dc      	b.n	800100a <display7SEG+0x372>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4859      	ldr	r0, [pc, #356]	; (8000fbc <display7SEG+0x324>)
 8000e56:	f001 fa94 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4857      	ldr	r0, [pc, #348]	; (8000fbc <display7SEG+0x324>)
 8000e60:	f001 fa8f 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2104      	movs	r1, #4
 8000e68:	4854      	ldr	r0, [pc, #336]	; (8000fbc <display7SEG+0x324>)
 8000e6a:	f001 fa8a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2108      	movs	r1, #8
 8000e72:	4852      	ldr	r0, [pc, #328]	; (8000fbc <display7SEG+0x324>)
 8000e74:	f001 fa85 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	484f      	ldr	r0, [pc, #316]	; (8000fbc <display7SEG+0x324>)
 8000e7e:	f001 fa80 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	484d      	ldr	r0, [pc, #308]	; (8000fbc <display7SEG+0x324>)
 8000e88:	f001 fa7b 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	484a      	ldr	r0, [pc, #296]	; (8000fbc <display7SEG+0x324>)
 8000e92:	f001 fa76 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000e96:	e0b8      	b.n	800100a <display7SEG+0x372>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4847      	ldr	r0, [pc, #284]	; (8000fbc <display7SEG+0x324>)
 8000e9e:	f001 fa70 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4845      	ldr	r0, [pc, #276]	; (8000fbc <display7SEG+0x324>)
 8000ea8:	f001 fa6b 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4842      	ldr	r0, [pc, #264]	; (8000fbc <display7SEG+0x324>)
 8000eb2:	f001 fa66 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4840      	ldr	r0, [pc, #256]	; (8000fbc <display7SEG+0x324>)
 8000ebc:	f001 fa61 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	483d      	ldr	r0, [pc, #244]	; (8000fbc <display7SEG+0x324>)
 8000ec6:	f001 fa5c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2120      	movs	r1, #32
 8000ece:	483b      	ldr	r0, [pc, #236]	; (8000fbc <display7SEG+0x324>)
 8000ed0:	f001 fa57 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <display7SEG+0x324>)
 8000eda:	f001 fa52 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000ede:	e094      	b.n	800100a <display7SEG+0x372>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4835      	ldr	r0, [pc, #212]	; (8000fbc <display7SEG+0x324>)
 8000ee6:	f001 fa4c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2102      	movs	r1, #2
 8000eee:	4833      	ldr	r0, [pc, #204]	; (8000fbc <display7SEG+0x324>)
 8000ef0:	f001 fa47 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <display7SEG+0x324>)
 8000efa:	f001 fa42 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <display7SEG+0x324>)
 8000f04:	f001 fa3d 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	482b      	ldr	r0, [pc, #172]	; (8000fbc <display7SEG+0x324>)
 8000f0e:	f001 fa38 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2120      	movs	r1, #32
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <display7SEG+0x324>)
 8000f18:	f001 fa33 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	4826      	ldr	r0, [pc, #152]	; (8000fbc <display7SEG+0x324>)
 8000f22:	f001 fa2e 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000f26:	e070      	b.n	800100a <display7SEG+0x372>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <display7SEG+0x324>)
 8000f2e:	f001 fa28 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <display7SEG+0x324>)
 8000f38:	f001 fa23 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	481e      	ldr	r0, [pc, #120]	; (8000fbc <display7SEG+0x324>)
 8000f42:	f001 fa1e 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2108      	movs	r1, #8
 8000f4a:	481c      	ldr	r0, [pc, #112]	; (8000fbc <display7SEG+0x324>)
 8000f4c:	f001 fa19 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2110      	movs	r1, #16
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <display7SEG+0x324>)
 8000f56:	f001 fa14 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <display7SEG+0x324>)
 8000f60:	f001 fa0f 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <display7SEG+0x324>)
 8000f6a:	f001 fa0a 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000f6e:	e04c      	b.n	800100a <display7SEG+0x372>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2101      	movs	r1, #1
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <display7SEG+0x324>)
 8000f76:	f001 fa04 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <display7SEG+0x324>)
 8000f80:	f001 f9ff 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2104      	movs	r1, #4
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <display7SEG+0x324>)
 8000f8a:	f001 f9fa 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <display7SEG+0x324>)
 8000f94:	f001 f9f5 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <display7SEG+0x324>)
 8000f9e:	f001 f9f0 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <display7SEG+0x324>)
 8000fa8:	f001 f9eb 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <display7SEG+0x324>)
 8000fb2:	f001 f9e6 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8000fb6:	e028      	b.n	800100a <display7SEG+0x372>
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <display7SEG+0x37c>)
 8000fc6:	f001 f9dc 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <display7SEG+0x37c>)
 8000fd0:	f001 f9d7 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <display7SEG+0x37c>)
 8000fda:	f001 f9d2 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <display7SEG+0x37c>)
 8000fe4:	f001 f9cd 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <display7SEG+0x37c>)
 8000fee:	f001 f9c8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <display7SEG+0x37c>)
 8000ff8:	f001 f9c3 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <display7SEG+0x37c>)
 8001002:	f001 f9be 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8001006:	e000      	b.n	800100a <display7SEG+0x372>
		default:
			break;
 8001008:	bf00      	nop
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010c00 	.word	0x40010c00

08001018 <display7SEG_2>:

void display7SEG_2(int num, int substatus)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	if (substatus == 0)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d114      	bne.n	8001052 <display7SEG_2+0x3a>
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	48c8      	ldr	r0, [pc, #800]	; (8001350 <display7SEG_2+0x338>)
 800102e:	f001 f9a8 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2104      	movs	r1, #4
 8001036:	48c6      	ldr	r0, [pc, #792]	; (8001350 <display7SEG_2+0x338>)
 8001038:	f001 f9a3 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2108      	movs	r1, #8
 8001040:	48c3      	ldr	r0, [pc, #780]	; (8001350 <display7SEG_2+0x338>)
 8001042:	f001 f99e 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	48c1      	ldr	r0, [pc, #772]	; (8001350 <display7SEG_2+0x338>)
 800104c:	f001 f999 	bl	8002382 <HAL_GPIO_WritePin>
 8001050:	e013      	b.n	800107a <display7SEG_2+0x62>
	}
	else
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2102      	movs	r1, #2
 8001056:	48be      	ldr	r0, [pc, #760]	; (8001350 <display7SEG_2+0x338>)
 8001058:	f001 f993 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2104      	movs	r1, #4
 8001060:	48bb      	ldr	r0, [pc, #748]	; (8001350 <display7SEG_2+0x338>)
 8001062:	f001 f98e 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2108      	movs	r1, #8
 800106a:	48b9      	ldr	r0, [pc, #740]	; (8001350 <display7SEG_2+0x338>)
 800106c:	f001 f989 	bl	8002382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	48b6      	ldr	r0, [pc, #728]	; (8001350 <display7SEG_2+0x338>)
 8001076:	f001 f984 	bl	8002382 <HAL_GPIO_WritePin>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b09      	cmp	r3, #9
 800107e:	f200 81bf 	bhi.w	8001400 <display7SEG_2+0x3e8>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <display7SEG_2+0x70>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010b1 	.word	0x080010b1
 800108c:	08001105 	.word	0x08001105
 8001090:	08001159 	.word	0x08001159
 8001094:	080011ad 	.word	0x080011ad
 8001098:	08001201 	.word	0x08001201
 800109c:	08001255 	.word	0x08001255
 80010a0:	080012a9 	.word	0x080012a9
 80010a4:	080012fd 	.word	0x080012fd
 80010a8:	08001359 	.word	0x08001359
 80010ac:	080013ad 	.word	0x080013ad
	}
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	48a7      	ldr	r0, [pc, #668]	; (8001354 <display7SEG_2+0x33c>)
 80010b6:	f001 f964 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	48a4      	ldr	r0, [pc, #656]	; (8001354 <display7SEG_2+0x33c>)
 80010c2:	f001 f95e 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	48a1      	ldr	r0, [pc, #644]	; (8001354 <display7SEG_2+0x33c>)
 80010ce:	f001 f958 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	489e      	ldr	r0, [pc, #632]	; (8001354 <display7SEG_2+0x33c>)
 80010da:	f001 f952 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	489b      	ldr	r0, [pc, #620]	; (8001354 <display7SEG_2+0x33c>)
 80010e6:	f001 f94c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4898      	ldr	r0, [pc, #608]	; (8001354 <display7SEG_2+0x33c>)
 80010f2:	f001 f946 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4895      	ldr	r0, [pc, #596]	; (8001354 <display7SEG_2+0x33c>)
 80010fe:	f001 f940 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8001102:	e17e      	b.n	8001402 <display7SEG_2+0x3ea>
		case 1:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4892      	ldr	r0, [pc, #584]	; (8001354 <display7SEG_2+0x33c>)
 800110a:	f001 f93a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	488f      	ldr	r0, [pc, #572]	; (8001354 <display7SEG_2+0x33c>)
 8001116:	f001 f934 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	488c      	ldr	r0, [pc, #560]	; (8001354 <display7SEG_2+0x33c>)
 8001122:	f001 f92e 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	4889      	ldr	r0, [pc, #548]	; (8001354 <display7SEG_2+0x33c>)
 800112e:	f001 f928 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	4886      	ldr	r0, [pc, #536]	; (8001354 <display7SEG_2+0x33c>)
 800113a:	f001 f922 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4883      	ldr	r0, [pc, #524]	; (8001354 <display7SEG_2+0x33c>)
 8001146:	f001 f91c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	4880      	ldr	r0, [pc, #512]	; (8001354 <display7SEG_2+0x33c>)
 8001152:	f001 f916 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8001156:	e154      	b.n	8001402 <display7SEG_2+0x3ea>
		case 2:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	487d      	ldr	r0, [pc, #500]	; (8001354 <display7SEG_2+0x33c>)
 800115e:	f001 f910 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	487a      	ldr	r0, [pc, #488]	; (8001354 <display7SEG_2+0x33c>)
 800116a:	f001 f90a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	4877      	ldr	r0, [pc, #476]	; (8001354 <display7SEG_2+0x33c>)
 8001176:	f001 f904 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4874      	ldr	r0, [pc, #464]	; (8001354 <display7SEG_2+0x33c>)
 8001182:	f001 f8fe 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <display7SEG_2+0x33c>)
 800118e:	f001 f8f8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001198:	486e      	ldr	r0, [pc, #440]	; (8001354 <display7SEG_2+0x33c>)
 800119a:	f001 f8f2 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	486b      	ldr	r0, [pc, #428]	; (8001354 <display7SEG_2+0x33c>)
 80011a6:	f001 f8ec 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80011aa:	e12a      	b.n	8001402 <display7SEG_2+0x3ea>
		case 3:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4868      	ldr	r0, [pc, #416]	; (8001354 <display7SEG_2+0x33c>)
 80011b2:	f001 f8e6 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4865      	ldr	r0, [pc, #404]	; (8001354 <display7SEG_2+0x33c>)
 80011be:	f001 f8e0 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	4862      	ldr	r0, [pc, #392]	; (8001354 <display7SEG_2+0x33c>)
 80011ca:	f001 f8da 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	485f      	ldr	r0, [pc, #380]	; (8001354 <display7SEG_2+0x33c>)
 80011d6:	f001 f8d4 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e0:	485c      	ldr	r0, [pc, #368]	; (8001354 <display7SEG_2+0x33c>)
 80011e2:	f001 f8ce 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	4859      	ldr	r0, [pc, #356]	; (8001354 <display7SEG_2+0x33c>)
 80011ee:	f001 f8c8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	4856      	ldr	r0, [pc, #344]	; (8001354 <display7SEG_2+0x33c>)
 80011fa:	f001 f8c2 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80011fe:	e100      	b.n	8001402 <display7SEG_2+0x3ea>
		case 4:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4853      	ldr	r0, [pc, #332]	; (8001354 <display7SEG_2+0x33c>)
 8001206:	f001 f8bc 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4850      	ldr	r0, [pc, #320]	; (8001354 <display7SEG_2+0x33c>)
 8001212:	f001 f8b6 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	484d      	ldr	r0, [pc, #308]	; (8001354 <display7SEG_2+0x33c>)
 800121e:	f001 f8b0 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	484a      	ldr	r0, [pc, #296]	; (8001354 <display7SEG_2+0x33c>)
 800122a:	f001 f8aa 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001234:	4847      	ldr	r0, [pc, #284]	; (8001354 <display7SEG_2+0x33c>)
 8001236:	f001 f8a4 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001240:	4844      	ldr	r0, [pc, #272]	; (8001354 <display7SEG_2+0x33c>)
 8001242:	f001 f89e 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	4841      	ldr	r0, [pc, #260]	; (8001354 <display7SEG_2+0x33c>)
 800124e:	f001 f898 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 8001252:	e0d6      	b.n	8001402 <display7SEG_2+0x3ea>
		case 5:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	483e      	ldr	r0, [pc, #248]	; (8001354 <display7SEG_2+0x33c>)
 800125a:	f001 f892 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001264:	483b      	ldr	r0, [pc, #236]	; (8001354 <display7SEG_2+0x33c>)
 8001266:	f001 f88c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	4838      	ldr	r0, [pc, #224]	; (8001354 <display7SEG_2+0x33c>)
 8001272:	f001 f886 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127c:	4835      	ldr	r0, [pc, #212]	; (8001354 <display7SEG_2+0x33c>)
 800127e:	f001 f880 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	4832      	ldr	r0, [pc, #200]	; (8001354 <display7SEG_2+0x33c>)
 800128a:	f001 f87a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	482f      	ldr	r0, [pc, #188]	; (8001354 <display7SEG_2+0x33c>)
 8001296:	f001 f874 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	482c      	ldr	r0, [pc, #176]	; (8001354 <display7SEG_2+0x33c>)
 80012a2:	f001 f86e 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80012a6:	e0ac      	b.n	8001402 <display7SEG_2+0x3ea>
		case 6:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	4829      	ldr	r0, [pc, #164]	; (8001354 <display7SEG_2+0x33c>)
 80012ae:	f001 f868 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <display7SEG_2+0x33c>)
 80012ba:	f001 f862 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c4:	4823      	ldr	r0, [pc, #140]	; (8001354 <display7SEG_2+0x33c>)
 80012c6:	f001 f85c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <display7SEG_2+0x33c>)
 80012d2:	f001 f856 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <display7SEG_2+0x33c>)
 80012de:	f001 f850 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e8:	481a      	ldr	r0, [pc, #104]	; (8001354 <display7SEG_2+0x33c>)
 80012ea:	f001 f84a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <display7SEG_2+0x33c>)
 80012f6:	f001 f844 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80012fa:	e082      	b.n	8001402 <display7SEG_2+0x3ea>
		case 7:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4814      	ldr	r0, [pc, #80]	; (8001354 <display7SEG_2+0x33c>)
 8001302:	f001 f83e 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <display7SEG_2+0x33c>)
 800130e:	f001 f838 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <display7SEG_2+0x33c>)
 800131a:	f001 f832 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <display7SEG_2+0x33c>)
 8001326:	f001 f82c 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <display7SEG_2+0x33c>)
 8001332:	f001 f826 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <display7SEG_2+0x33c>)
 800133e:	f001 f820 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <display7SEG_2+0x33c>)
 800134a:	f001 f81a 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 800134e:	e058      	b.n	8001402 <display7SEG_2+0x3ea>
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
		case 8:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <display7SEG_2+0x3f4>)
 800135e:	f001 f810 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <display7SEG_2+0x3f4>)
 800136a:	f001 f80a 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <display7SEG_2+0x3f4>)
 8001376:	f001 f804 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <display7SEG_2+0x3f4>)
 8001382:	f000 fffe 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <display7SEG_2+0x3f4>)
 800138e:	f000 fff8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <display7SEG_2+0x3f4>)
 800139a:	f000 fff2 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4819      	ldr	r0, [pc, #100]	; (800140c <display7SEG_2+0x3f4>)
 80013a6:	f000 ffec 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80013aa:	e02a      	b.n	8001402 <display7SEG_2+0x3ea>
		case 9:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <display7SEG_2+0x3f4>)
 80013b2:	f000 ffe6 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <display7SEG_2+0x3f4>)
 80013be:	f000 ffe0 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <display7SEG_2+0x3f4>)
 80013ca:	f000 ffda 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <display7SEG_2+0x3f4>)
 80013d6:	f000 ffd4 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <display7SEG_2+0x3f4>)
 80013e2:	f000 ffce 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <display7SEG_2+0x3f4>)
 80013ee:	f000 ffc8 	bl	8002382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <display7SEG_2+0x3f4>)
 80013fa:	f000 ffc2 	bl	8002382 <HAL_GPIO_WritePin>
			break;
 80013fe:	e000      	b.n	8001402 <display7SEG_2+0x3ea>
		default:
			break;
 8001400:	bf00      	nop
	}
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40010c00 	.word	0x40010c00

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fcb4 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f846 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f000 f8cc 	bl	80015b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001420:	f000 f87e 	bl	8001520 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <main+0x70>)
 8001426:	f001 fc09 	bl	8002c3c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <main+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
  red = 5, green = 3, amber = 2;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <main+0x78>)
 8001432:	2205      	movs	r2, #5
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <main+0x7c>)
 8001438:	2203      	movs	r2, #3
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <main+0x80>)
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]

  SCH_init();
 8001442:	f000 f92c 	bl	800169e <SCH_init>
  SCH_Add_Task(timerRun, 0, 10);
 8001446:	220a      	movs	r2, #10
 8001448:	2100      	movs	r1, #0
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <main+0x84>)
 800144c:	f000 f93c 	bl	80016c8 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8001450:	220a      	movs	r2, #10
 8001452:	2100      	movs	r1, #0
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <main+0x88>)
 8001456:	f000 f937 	bl	80016c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 10);
 800145a:	220a      	movs	r2, #10
 800145c:	2100      	movs	r1, #0
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <main+0x8c>)
 8001460:	f000 f932 	bl	80016c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 10);
 8001464:	220a      	movs	r2, #10
 8001466:	2100      	movs	r1, #0
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <main+0x90>)
 800146a:	f000 f92d 	bl	80016c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 0, 10);
 800146e:	220a      	movs	r2, #10
 8001470:	2100      	movs	r1, #0
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <main+0x94>)
 8001474:	f000 f928 	bl	80016c8 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001478:	f000 f9ee 	bl	8001858 <SCH_Dispatch_Tasks>
 800147c:	e7fc      	b.n	8001478 <main+0x68>
 800147e:	bf00      	nop
 8001480:	200000b8 	.word	0x200000b8
 8001484:	20000074 	.word	0x20000074
 8001488:	200000b4 	.word	0x200000b4
 800148c:	200000b0 	.word	0x200000b0
 8001490:	200000ac 	.word	0x200000ac
 8001494:	08001a1d 	.word	0x08001a1d
 8001498:	080001d9 	.word	0x080001d9
 800149c:	08000869 	.word	0x08000869
 80014a0:	08000b19 	.word	0x08000b19
 80014a4:	08000c71 	.word	0x08000c71

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2228      	movs	r2, #40	; 0x28
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 ff70 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d2:	2310      	movs	r3, #16
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ff80 	bl	80023e4 <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ea:	f000 f8d3 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f001 f9ec 	bl	80028e4 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001512:	f000 f8bf 	bl	8001694 <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_TIM2_Init+0x94>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_TIM2_Init+0x94>)
 8001546:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800154a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM2_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_TIM2_Init+0x94>)
 8001554:	2209      	movs	r2, #9
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_TIM2_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_TIM2_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <MX_TIM2_Init+0x94>)
 8001566:	f001 fb19 	bl	8002b9c <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001570:	f000 f890 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4619      	mov	r1, r3
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <MX_TIM2_Init+0x94>)
 8001582:	f001 fc97 	bl	8002eb4 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800158c:	f000 f882 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_TIM2_Init+0x94>)
 800159e:	f001 fe6f 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 f874 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000b8 	.word	0x200000b8

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_GPIO_Init+0xbc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80015fc:	2200      	movs	r2, #0
 80015fe:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <MX_GPIO_Init+0xc0>)
 8001604:	f000 febd 	bl	8002382 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8001608:	2200      	movs	r2, #0
 800160a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800160e:	481b      	ldr	r0, [pc, #108]	; (800167c <MX_GPIO_Init+0xc4>)
 8001610:	f000 feb7 	bl	8002382 <HAL_GPIO_WritePin>
                          |SEG8_Pin|SEG9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001614:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001618:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2302      	movs	r3, #2
 8001624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <MX_GPIO_Init+0xc0>)
 800162e:	f000 fd17 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8001632:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001636:	60bb      	str	r3, [r7, #8]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2302      	movs	r3, #2
 8001642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4619      	mov	r1, r3
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_GPIO_Init+0xc4>)
 800164c:	f000 fd08 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001650:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4619      	mov	r1, r3
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_GPIO_Init+0xc0>)
 8001666:	f000 fcfb 	bl	8002060 <HAL_GPIO_Init>

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00

08001680 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001688:	f000 f876 	bl	8001778 <SCH_Update>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>

0800169e <SCH_init>:

// scheduler.c
unsigned char Error_code_G = 0;

void SCH_init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	e006      	b.n	80016b8 <SCH_init+0x1a>
	    SCH_Delete_Task(i);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f91f 	bl	80018f0 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	3301      	adds	r3, #1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b27      	cmp	r3, #39	; 0x27
 80016bc:	d9f5      	bls.n	80016aa <SCH_init+0xc>
	}

}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]

    // First, find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80016d8:	e002      	b.n	80016e0 <SCH_Add_Task+0x18>
        Index++;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	3301      	adds	r3, #1
 80016de:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80016e0:	7dfa      	ldrb	r2, [r7, #23]
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <SCH_Add_Task+0xa4>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <SCH_Add_Task+0x32>
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b27      	cmp	r3, #39	; 0x27
 80016f8:	d9ef      	bls.n	80016da <SCH_Add_Task+0x12>
    }

    // Have we reached the end of the list?
    if (Index == SCH_MAX_TASKS) {
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b28      	cmp	r3, #40	; 0x28
 80016fe:	d104      	bne.n	800170a <SCH_Add_Task+0x42>
        // Task list is full
        // Set the global error variable
        Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <SCH_Add_Task+0xa8>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]

        // Also return an error code
        return SCH_MAX_TASKS;
 8001706:	2328      	movs	r3, #40	; 0x28
 8001708:	e02b      	b.n	8001762 <SCH_Add_Task+0x9a>
    }

    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 800170a:	7dfa      	ldrb	r2, [r7, #23]
 800170c:	4917      	ldr	r1, [pc, #92]	; (800176c <SCH_Add_Task+0xa4>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 800171c:	7dfa      	ldrb	r2, [r7, #23]
 800171e:	4913      	ldr	r1, [pc, #76]	; (800176c <SCH_Add_Task+0xa4>)
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3304      	adds	r3, #4
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD / 10;
 8001730:	7dfa      	ldrb	r2, [r7, #23]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	490f      	ldr	r1, [pc, #60]	; (8001774 <SCH_Add_Task+0xac>)
 8001736:	fba1 1303 	umull	r1, r3, r1, r3
 800173a:	08d9      	lsrs	r1, r3, #3
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <SCH_Add_Task+0xa4>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4403      	add	r3, r0
 8001748:	3308      	adds	r3, #8
 800174a:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 800174c:	7dfa      	ldrb	r2, [r7, #23]
 800174e:	4907      	ldr	r1, [pc, #28]	; (800176c <SCH_Add_Task+0xa4>)
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	330c      	adds	r3, #12
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

    // Return position of task (to allow later deletion)
    return Index;
 8001760:	7dfb      	ldrb	r3, [r7, #23]
}
 8001762:	4618      	mov	r0, r3
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000100 	.word	0x20000100
 8001770:	20000078 	.word	0x20000078
 8001774:	cccccccd 	.word	0xcccccccd

08001778 <SCH_Update>:


void SCH_Update(void) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
    unsigned char Index;

    // NOTE: Calculations are in *TICKS* (not milliseconds)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e05d      	b.n	8001840 <SCH_Update+0xc8>
        // Check if there is a task at this location
        if (SCH_tasks_G[Index].pTask) {
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4933      	ldr	r1, [pc, #204]	; (8001854 <SCH_Update+0xdc>)
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d050      	beq.n	800183a <SCH_Update+0xc2>
            if (SCH_tasks_G[Index].Delay == 0) {
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	492e      	ldr	r1, [pc, #184]	; (8001854 <SCH_Update+0xdc>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d132      	bne.n	8001814 <SCH_Update+0x9c>
                // The task is due to run
                // Increment the 'RunMe' flag
                SCH_tasks_G[Index].RunMe += 1;
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	4928      	ldr	r1, [pc, #160]	; (8001854 <SCH_Update+0xdc>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	330c      	adds	r3, #12
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2d8      	uxtb	r0, r3
 80017c6:	4923      	ldr	r1, [pc, #140]	; (8001854 <SCH_Update+0xdc>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	330c      	adds	r3, #12
 80017d4:	4602      	mov	r2, r0
 80017d6:	701a      	strb	r2, [r3, #0]

                if (SCH_tasks_G[Index].Period) {
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	491e      	ldr	r1, [pc, #120]	; (8001854 <SCH_Update+0xdc>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3308      	adds	r3, #8
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d025      	beq.n	800183a <SCH_Update+0xc2>
                    // Schedule periodic tasks to run again
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80017ee:	79f9      	ldrb	r1, [r7, #7]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <SCH_Update+0xdc>)
 80017f4:	460b      	mov	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4403      	add	r3, r0
 80017fe:	3308      	adds	r3, #8
 8001800:	6819      	ldr	r1, [r3, #0]
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <SCH_Update+0xdc>)
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	3304      	adds	r3, #4
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	e012      	b.n	800183a <SCH_Update+0xc2>
                }
            } else {
                // Not yet ready to run: just decrement the delay
                SCH_tasks_G[Index].Delay -= 1;
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	490f      	ldr	r1, [pc, #60]	; (8001854 <SCH_Update+0xdc>)
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	1e59      	subs	r1, r3, #1
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <SCH_Update+0xdc>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	3304      	adds	r3, #4
 8001838:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b27      	cmp	r3, #39	; 0x27
 8001844:	d99e      	bls.n	8001784 <SCH_Update+0xc>
            }
        }
    }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000100 	.word	0x20000100

08001858 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
    unsigned char Index;

    // Dispatches (runs) the next task if one is ready
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e03a      	b.n	80018da <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	4921      	ldr	r1, [pc, #132]	; (80018ec <SCH_Dispatch_Tasks+0x94>)
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	330c      	adds	r3, #12
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d02c      	beq.n	80018d4 <SCH_Dispatch_Tasks+0x7c>
            // Run the task
            (*SCH_tasks_G[Index].pTask)();
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	491b      	ldr	r1, [pc, #108]	; (80018ec <SCH_Dispatch_Tasks+0x94>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4798      	blx	r3

            // Reset/reduce RunMe flag
            SCH_tasks_G[Index].RunMe -= 1;
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	4917      	ldr	r1, [pc, #92]	; (80018ec <SCH_Dispatch_Tasks+0x94>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	330c      	adds	r3, #12
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b2d8      	uxtb	r0, r3
 80018a4:	4911      	ldr	r1, [pc, #68]	; (80018ec <SCH_Dispatch_Tasks+0x94>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	330c      	adds	r3, #12
 80018b2:	4602      	mov	r2, r0
 80018b4:	701a      	strb	r2, [r3, #0]

            // If this is a 'one-shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0) {
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <SCH_Dispatch_Tasks+0x94>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <SCH_Dispatch_Tasks+0x7c>
                SCH_Delete_Task(Index);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f80e 	bl	80018f0 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	3301      	adds	r3, #1
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b27      	cmp	r3, #39	; 0x27
 80018de:	d9c1      	bls.n	8001864 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000100 	.word	0x20000100

080018f0 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(const tByte TASK_INDEX) {
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
    unsigned char Return_code;

    if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	491e      	ldr	r1, [pc, #120]	; (8001978 <SCH_Delete_Task+0x88>)
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <SCH_Delete_Task+0x2a>
        // No task at this location
        // Set the global error variable
        Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <SCH_Delete_Task+0x8c>)
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]

        // Also return an error code
        Return_code = RETURN_ERROR;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e028      	b.n	800196c <SCH_Delete_Task+0x7c>
    } else {
        // Task found, prepare to delete
        Return_code = RETURN_NORMAL;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]

        // Clear task details
        SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <SCH_Delete_Task+0x88>)
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001930:	79fa      	ldrb	r2, [r7, #7]
 8001932:	4911      	ldr	r1, [pc, #68]	; (8001978 <SCH_Delete_Task+0x88>)
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	3304      	adds	r3, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[TASK_INDEX].Period = 0;
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	490c      	ldr	r1, [pc, #48]	; (8001978 <SCH_Delete_Task+0x88>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3308      	adds	r3, #8
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	4907      	ldr	r1, [pc, #28]	; (8001978 <SCH_Delete_Task+0x88>)
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	330c      	adds	r3, #12
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    }

    // Return status
    return Return_code;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000100 	.word	0x20000100
 800197c:	20000078 	.word	0x20000078

08001980 <setTimer1>:
int timer2_counter = 1;
int timer3_counter = 1;
int TIMER_CYCLE = 10;

void setTimer1(int duration)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <setTimer1+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <setTimer1+0x2c>)
 8001994:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <setTimer1+0x30>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000040 	.word	0x20000040
 80019ac:	20000034 	.word	0x20000034
 80019b0:	2000007c 	.word	0x2000007c

080019b4 <setTimer2>:

void setTimer2(int duration)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <setTimer2+0x28>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <setTimer2+0x2c>)
 80019c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <setTimer2+0x30>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000040 	.word	0x20000040
 80019e0:	20000038 	.word	0x20000038
 80019e4:	20000080 	.word	0x20000080

080019e8 <setTimer3>:

void setTimer3(int duration)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <setTimer3+0x28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <setTimer3+0x2c>)
 80019fc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <setTimer3+0x30>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000040 	.word	0x20000040
 8001a14:	2000003c 	.word	0x2000003c
 8001a18:	20000084 	.word	0x20000084

08001a1c <timerRun>:

void timerRun()
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	if (timer1_counter == 0)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <timerRun+0x54>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <timerRun+0x12>
	{
		timer1_flag = 1;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <timerRun+0x58>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter == 0)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <timerRun+0x5c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <timerRun+0x20>
	{
		timer2_flag = 1;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <timerRun+0x60>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter == 0)
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <timerRun+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <timerRun+0x2e>
	{
		timer3_flag = 1;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <timerRun+0x68>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
	}
	timer1_counter--;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <timerRun+0x54>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <timerRun+0x54>)
 8001a52:	6013      	str	r3, [r2, #0]
	timer2_counter--;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <timerRun+0x5c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <timerRun+0x5c>)
 8001a5c:	6013      	str	r3, [r2, #0]
	timer3_counter--;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <timerRun+0x64>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <timerRun+0x64>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000034 	.word	0x20000034
 8001a74:	2000007c 	.word	0x2000007c
 8001a78:	20000038 	.word	0x20000038
 8001a7c:	20000080 	.word	0x20000080
 8001a80:	2000003c 	.word	0x2000003c
 8001a84:	20000084 	.word	0x20000084

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201c      	movs	r0, #28
 8001b1c:	f000 fa69 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b20:	201c      	movs	r0, #28
 8001b22:	f000 fa82 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f947 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM2_IRQHandler+0x10>)
 8001b8a:	f001 f8a3 	bl	8002cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000b8 	.word	0x200000b8

08001b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <OffLight>:
 */

#include "traffic_light.h"

void OffLight()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <OffLight+0x4c>)
 8001bae:	f000 fbe8 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <OffLight+0x4c>)
 8001bb8:	f000 fbe3 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <OffLight+0x4c>)
 8001bc4:	f000 fbdd 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bce:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <OffLight+0x4c>)
 8001bd0:	f000 fbd7 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <OffLight+0x4c>)
 8001bdc:	f000 fbd1 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <OffLight+0x4c>)
 8001be8:	f000 fbcb 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <RedGreen>:

void RedGreen()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	4810      	ldr	r0, [pc, #64]	; (8001c40 <RedGreen+0x4c>)
 8001bfe:	f000 fbc0 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <RedGreen+0x4c>)
 8001c08:	f000 fbbb 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <RedGreen+0x4c>)
 8001c14:	f000 fbb5 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <RedGreen+0x4c>)
 8001c20:	f000 fbaf 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <RedGreen+0x4c>)
 8001c2c:	f000 fba9 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <RedGreen+0x4c>)
 8001c38:	f000 fba3 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40010800 	.word	0x40010800

08001c44 <RedAmber>:

void RedAmber()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2140      	movs	r1, #64	; 0x40
 8001c4c:	4810      	ldr	r0, [pc, #64]	; (8001c90 <RedAmber+0x4c>)
 8001c4e:	f000 fb98 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <RedAmber+0x4c>)
 8001c58:	f000 fb93 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <RedAmber+0x4c>)
 8001c64:	f000 fb8d 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6e:	4808      	ldr	r0, [pc, #32]	; (8001c90 <RedAmber+0x4c>)
 8001c70:	f000 fb87 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <RedAmber+0x4c>)
 8001c7c:	f000 fb81 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <RedAmber+0x4c>)
 8001c88:	f000 fb7b 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40010800 	.word	0x40010800

08001c94 <GreenRed>:


void GreenRed()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <GreenRed+0x4c>)
 8001c9e:	f000 fb70 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <GreenRed+0x4c>)
 8001ca8:	f000 fb6b 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb2:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <GreenRed+0x4c>)
 8001cb4:	f000 fb65 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbe:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <GreenRed+0x4c>)
 8001cc0:	f000 fb5f 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <GreenRed+0x4c>)
 8001ccc:	f000 fb59 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd6:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <GreenRed+0x4c>)
 8001cd8:	f000 fb53 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40010800 	.word	0x40010800

08001ce4 <AmberRed>:

void AmberRed()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	4810      	ldr	r0, [pc, #64]	; (8001d30 <AmberRed+0x4c>)
 8001cee:	f000 fb48 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <AmberRed+0x4c>)
 8001cf8:	f000 fb43 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d02:	480b      	ldr	r0, [pc, #44]	; (8001d30 <AmberRed+0x4c>)
 8001d04:	f000 fb3d 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <AmberRed+0x4c>)
 8001d10:	f000 fb37 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <AmberRed+0x4c>)
 8001d1c:	f000 fb31 	bl	8002382 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d26:	4802      	ldr	r0, [pc, #8]	; (8001d30 <AmberRed+0x4c>)
 8001d28:	f000 fb2b 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010800 	.word	0x40010800

08001d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d34:	f7ff ff30 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d3a:	490c      	ldr	r1, [pc, #48]	; (8001d6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d50:	4c09      	ldr	r4, [pc, #36]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f001 faf9 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d62:	f7ff fb55 	bl	8001410 <main>
  bx lr
 8001d66:	4770      	bx	lr
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001d70:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 8001d74:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001d78:	20000424 	.word	0x20000424

08001d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_2_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x28>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x28>)
 8001d8a:	f043 0310 	orr.w	r3, r3, #16
 8001d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f923 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	200f      	movs	r0, #15
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fe74 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f93b 	bl	8002046 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f903 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000044 	.word	0x20000044
 8001e04:	2000004c 	.word	0x2000004c
 8001e08:	20000048 	.word	0x20000048

08001e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x1c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x20>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <HAL_IncTick+0x20>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	2000004c 	.word	0x2000004c
 8001e2c:	20000420 	.word	0x20000420

08001e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_GetTick+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000420 	.word	0x20000420

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4906      	ldr	r1, [pc, #24]	; (8001edc <__NVIC_EnableIRQ+0x34>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f7ff ff90 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff2d 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff42 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff35 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002072:	e148      	b.n	8002306 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002074:	2201      	movs	r2, #1
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8137 	bne.w	8002300 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4aa3      	ldr	r2, [pc, #652]	; (8002324 <HAL_GPIO_Init+0x2c4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d05e      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 800209c:	4aa1      	ldr	r2, [pc, #644]	; (8002324 <HAL_GPIO_Init+0x2c4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d875      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020a2:	4aa1      	ldr	r2, [pc, #644]	; (8002328 <HAL_GPIO_Init+0x2c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d058      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020a8:	4a9f      	ldr	r2, [pc, #636]	; (8002328 <HAL_GPIO_Init+0x2c8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d86f      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020ae:	4a9f      	ldr	r2, [pc, #636]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d052      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020b4:	4a9d      	ldr	r2, [pc, #628]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d869      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020ba:	4a9d      	ldr	r2, [pc, #628]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d04c      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020c0:	4a9b      	ldr	r2, [pc, #620]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d863      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020c6:	4a9b      	ldr	r2, [pc, #620]	; (8002334 <HAL_GPIO_Init+0x2d4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d046      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020cc:	4a99      	ldr	r2, [pc, #612]	; (8002334 <HAL_GPIO_Init+0x2d4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d85d      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d82a      	bhi.n	800212c <HAL_GPIO_Init+0xcc>
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d859      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <HAL_GPIO_Init+0x80>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	0800215b 	.word	0x0800215b
 80020e4:	08002135 	.word	0x08002135
 80020e8:	08002147 	.word	0x08002147
 80020ec:	08002189 	.word	0x08002189
 80020f0:	0800218f 	.word	0x0800218f
 80020f4:	0800218f 	.word	0x0800218f
 80020f8:	0800218f 	.word	0x0800218f
 80020fc:	0800218f 	.word	0x0800218f
 8002100:	0800218f 	.word	0x0800218f
 8002104:	0800218f 	.word	0x0800218f
 8002108:	0800218f 	.word	0x0800218f
 800210c:	0800218f 	.word	0x0800218f
 8002110:	0800218f 	.word	0x0800218f
 8002114:	0800218f 	.word	0x0800218f
 8002118:	0800218f 	.word	0x0800218f
 800211c:	0800218f 	.word	0x0800218f
 8002120:	0800218f 	.word	0x0800218f
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002151 	.word	0x08002151
 800212c:	4a82      	ldr	r2, [pc, #520]	; (8002338 <HAL_GPIO_Init+0x2d8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002132:	e02c      	b.n	800218e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e029      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	3304      	adds	r3, #4
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e024      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	3308      	adds	r3, #8
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e01f      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	330c      	adds	r3, #12
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e01a      	b.n	8002190 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002162:	2304      	movs	r3, #4
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e013      	b.n	8002190 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	611a      	str	r2, [r3, #16]
          break;
 800217a:	e009      	b.n	8002190 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	615a      	str	r2, [r3, #20]
          break;
 8002186:	e003      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x130>
          break;
 800218e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d801      	bhi.n	800219a <HAL_GPIO_Init+0x13a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e001      	b.n	800219e <HAL_GPIO_Init+0x13e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d802      	bhi.n	80021ac <HAL_GPIO_Init+0x14c>
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x152>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	3b08      	subs	r3, #8
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	210f      	movs	r1, #15
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8090 	beq.w	8002300 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e0:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a55      	ldr	r2, [pc, #340]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f8:	4a51      	ldr	r2, [pc, #324]	; (8002340 <HAL_GPIO_Init+0x2e0>)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x2e4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1dc>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_GPIO_Init+0x2ec>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1d8>
 8002234:	2302      	movs	r3, #2
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x1e2>
 8002238:	2303      	movs	r3, #3
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x1e2>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x1e2>
 8002240:	2300      	movs	r3, #0
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002252:	493b      	ldr	r1, [pc, #236]	; (8002340 <HAL_GPIO_Init+0x2e0>)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4937      	ldr	r1, [pc, #220]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4933      	ldr	r1, [pc, #204]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 8002284:	4013      	ands	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	492d      	ldr	r1, [pc, #180]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022a2:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4929      	ldr	r1, [pc, #164]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4923      	ldr	r1, [pc, #140]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	491f      	ldr	r1, [pc, #124]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4919      	ldr	r1, [pc, #100]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4915      	ldr	r1, [pc, #84]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	f47f aeaf 	bne.w	8002074 <HAL_GPIO_Init+0x14>
  }
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	372c      	adds	r7, #44	; 0x2c
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	10320000 	.word	0x10320000
 8002328:	10310000 	.word	0x10310000
 800232c:	10220000 	.word	0x10220000
 8002330:	10210000 	.word	0x10210000
 8002334:	10120000 	.word	0x10120000
 8002338:	10110000 	.word	0x10110000
 800233c:	40021000 	.word	0x40021000
 8002340:	40010000 	.word	0x40010000
 8002344:	40010800 	.word	0x40010800
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40011000 	.word	0x40011000
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	807b      	strh	r3, [r7, #2]
 800238e:	4613      	mov	r3, r2
 8002390:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002392:	787b      	ldrb	r3, [r7, #1]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800239e:	e003      	b.n	80023a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	041a      	lsls	r2, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	400b      	ands	r3, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e26c      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002410:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
 800241c:	4b8c      	ldr	r3, [pc, #560]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x12c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e246      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x76>
 800244c:	4b80      	ldr	r3, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7f      	ldr	r2, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xbc>
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 80024a0:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b68      	ldr	r3, [pc, #416]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fcb6 	bl	8001e30 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fcb2 	bl	8001e30 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1fa      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe4>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fca2 	bl	8001e30 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fc9e 	bl	8001e30 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1e6      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x10c>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252a:	4b49      	ldr	r3, [pc, #292]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
 8002536:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1ba      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4939      	ldr	r1, [pc, #228]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x270>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fc57 	bl	8001e30 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fc53 	bl	8001e30 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e19b      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x270>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fc36 	bl	8001e30 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fc32 	bl	8001e30 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e17a      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03a      	beq.n	8002668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fc16 	bl	8001e30 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fc12 	bl	8001e30 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e15a      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 fa9a 	bl	8002b60 <RCC_Delay>
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_OscConfig+0x274>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7ff fbfc 	bl	8001e30 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff fbf8 	bl	8001e30 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d908      	bls.n	800265c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e140      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	42420000 	.word	0x42420000
 8002658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e9      	bne.n	800263c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a6 	beq.w	80027c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b97      	ldr	r3, [pc, #604]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a93      	ldr	r2, [pc, #588]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b8e      	ldr	r3, [pc, #568]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a8a      	ldr	r2, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fbb9 	bl	8001e30 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7ff fbb5 	bl	8001e30 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0fd      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x334>
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a75      	ldr	r2, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	e01c      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x356>
 8002720:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a6c      	ldr	r2, [pc, #432]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a66      	ldr	r2, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff fb69 	bl	8001e30 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff fb65 	bl	8001e30 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0ab      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x37e>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fb53 	bl	8001e30 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fb4f 	bl	8001e30 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e095      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a47      	ldr	r2, [pc, #284]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8081 	beq.w	80028ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d061      	beq.n	800289c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d146      	bne.n	800286e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fb23 	bl	8001e30 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7ff fb1f 	bl	8001e30 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e067      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	492d      	ldr	r1, [pc, #180]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	430b      	orrs	r3, r1
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7ff faf3 	bl	8001e30 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7ff faef 	bl	8001e30 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e037      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
 800286c:	e02f      	b.n	80028ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fadc 	bl	8001e30 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff fad8 	bl	8001e30 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e020      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x498>
 800289a:	e018      	b.n	80028ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e013      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420060 	.word	0x42420060

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d0      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4965      	ldr	r1, [pc, #404]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d040      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e073      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7ff fa2c 	bl	8001e30 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7ff fa28 	bl	8001e30 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e053      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f98a 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	080033c4 	.word	0x080033c4
 8002ab0:	20000044 	.word	0x20000044
 8002ab4:	20000048 	.word	0x20000048

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x36>
 8002ae6:	e027      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	e027      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	0c5b      	lsrs	r3, r3, #17
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	fb02 f203 	mul.w	r2, r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e004      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	613b      	str	r3, [r7, #16]
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	613b      	str	r3, [r7, #16]
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	693b      	ldr	r3, [r7, #16]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	080033d4 	.word	0x080033d4
 8002b58:	080033e4 	.word	0x080033e4
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <RCC_Delay+0x34>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <RCC_Delay+0x38>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a5b      	lsrs	r3, r3, #9
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b7c:	bf00      	nop
  }
  while (Delay --);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	60fa      	str	r2, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <RCC_Delay+0x1c>
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	20000044 	.word	0x20000044
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e041      	b.n	8002c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe ff92 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 fa56 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e035      	b.n	8002cc0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_TIM_Base_Start_IT+0x90>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x4e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x4e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_TIM_Base_Start_IT+0x94>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d010      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	e007      	b.n	8002cbe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40000400 	.word	0x40000400

08002cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0202 	mvn.w	r2, #2
 8002d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f998 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f98b 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f99a 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0204 	mvn.w	r2, #4
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f972 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f965 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f974 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d020      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0208 	mvn.w	r2, #8
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f94c 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f93f 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f94e 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f926 	bl	8003054 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f919 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f928 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0201 	mvn.w	r2, #1
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fc20 	bl	8001680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa6f 	bl	8003342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8f8 	bl	8003078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa42 	bl	8003330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0b4      	b.n	800303a <HAL_TIM_ConfigClockSource+0x186>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f08:	d03e      	beq.n	8002f88 <HAL_TIM_ConfigClockSource+0xd4>
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0e:	f200 8087 	bhi.w	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	f000 8086 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x172>
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1e:	d87f      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b70      	cmp	r3, #112	; 0x70
 8002f22:	d01a      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xa6>
 8002f24:	2b70      	cmp	r3, #112	; 0x70
 8002f26:	d87b      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b60      	cmp	r3, #96	; 0x60
 8002f2a:	d050      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x11a>
 8002f2c:	2b60      	cmp	r3, #96	; 0x60
 8002f2e:	d877      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b50      	cmp	r3, #80	; 0x50
 8002f32:	d03c      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xfa>
 8002f34:	2b50      	cmp	r3, #80	; 0x50
 8002f36:	d873      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d058      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x13a>
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d86f      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b30      	cmp	r3, #48	; 0x30
 8002f42:	d064      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	2b30      	cmp	r3, #48	; 0x30
 8002f46:	d86b      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d060      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x15a>
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d867      	bhi.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05c      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x15a>
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d05a      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x15a>
 8002f58:	e062      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f000 f96a 	bl	8003242 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	609a      	str	r2, [r3, #8]
      break;
 8002f86:	e04f      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f000 f953 	bl	8003242 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002faa:	609a      	str	r2, [r3, #8]
      break;
 8002fac:	e03c      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8ca 	bl	8003154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2150      	movs	r1, #80	; 0x50
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f921 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e02c      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8e8 	bl	80031b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2160      	movs	r1, #96	; 0x60
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f911 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002fec:	e01c      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f8aa 	bl	8003154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f901 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800300c:	e00c      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 f8f8 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800301e:	e003      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      break;
 8003024:	e000      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
	...

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a2b      	ldr	r2, [pc, #172]	; (800314c <TIM_Base_SetConfig+0xc0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x28>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x28>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <TIM_Base_SetConfig+0xc4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a20      	ldr	r2, [pc, #128]	; (800314c <TIM_Base_SetConfig+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0x52>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0x52>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <TIM_Base_SetConfig+0xc4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0d      	ldr	r2, [pc, #52]	; (800314c <TIM_Base_SetConfig+0xc0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]
  }
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400

08003154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 030a 	bic.w	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0210 	bic.w	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	f043 0307 	orr.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	021a      	lsls	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e041      	b.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d004      	beq.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10c      	bne.n	800330a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40000400 	.word	0x40000400

08003330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4d0c      	ldr	r5, [pc, #48]	; (800338c <__libc_init_array+0x38>)
 800335a:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	f000 f822 	bl	80033ac <_init>
 8003368:	2600      	movs	r6, #0
 800336a:	4d0a      	ldr	r5, [pc, #40]	; (8003394 <__libc_init_array+0x40>)
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	f855 3b04 	ldr.w	r3, [r5], #4
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	f855 3b04 	ldr.w	r3, [r5], #4
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	080033e8 	.word	0x080033e8
 8003390:	080033e8 	.word	0x080033e8
 8003394:	080033e8 	.word	0x080033e8
 8003398:	080033ec 	.word	0x080033ec

0800339c <memset>:
 800339c:	4603      	mov	r3, r0
 800339e:	4402      	add	r2, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	f803 1b01 	strb.w	r1, [r3], #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
