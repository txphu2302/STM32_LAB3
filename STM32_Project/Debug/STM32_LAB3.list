
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff4  08002ff4  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff4  08002ff4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000050  0800304c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800304c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097da  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc0  00000000  00000000  00029853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017124  00000000  00000000  0002c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7d7  00000000  00000000  00043a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082662  00000000  00000000  00050263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d28c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000d2918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb8 	.word	0x08002fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002fb8 	.word	0x08002fb8

0800014c <isButton1Pressed>:
int button_pressed[3];
int button_long_pressed[3];
int button_flag[3];

int isButton1Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button_flag[0] == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
	{
		button_flag[0] = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:
	}
	return 0;
}

int isButton2Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button_flag[1] == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
	{
		button_flag[1] = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000084 	.word	0x20000084

08000194 <isButton3Pressed>:
	}
	return 0;
}

int isButton3Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button_flag[2] == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	689b      	ldr	r3, [r3, #8]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
	{
		button_flag[2] = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	609a      	str	r2, [r3, #8]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000084 	.word	0x20000084

080001b8 <subkeyProcess>:
	}
	return 0;
}

void subkeyProcess(int index)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index] = 1;
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <subkeyProcess+0x1c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2101      	movs	r1, #1
 80001c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001ca:	bf00      	nop
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	20000084 	.word	0x20000084

080001d8 <getKeyInput>:

void getKeyInput()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e07c      	b.n	80002de <getKeyInput+0x106>
	{
		KeyReg2[i] = KeyReg1[i];
 80001e4:	4a42      	ldr	r2, [pc, #264]	; (80002f0 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4941      	ldr	r1, [pc, #260]	; (80002f4 <getKeyInput+0x11c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001f4:	4a40      	ldr	r2, [pc, #256]	; (80002f8 <getKeyInput+0x120>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	493c      	ldr	r1, [pc, #240]	; (80002f0 <getKeyInput+0x118>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0) KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10b      	bne.n	8000222 <getKeyInput+0x4a>
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	483b      	ldr	r0, [pc, #236]	; (80002fc <getKeyInput+0x124>)
 8000210:	f001 febe 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	4619      	mov	r1, r3
 8000218:	4a37      	ldr	r2, [pc, #220]	; (80002f8 <getKeyInput+0x120>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000220:	e019      	b.n	8000256 <getKeyInput+0x7e>
		else if (i == 1) KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d10b      	bne.n	8000240 <getKeyInput+0x68>
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	4833      	ldr	r0, [pc, #204]	; (80002fc <getKeyInput+0x124>)
 800022e:	f001 feaf 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	4619      	mov	r1, r3
 8000236:	4a30      	ldr	r2, [pc, #192]	; (80002f8 <getKeyInput+0x120>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023e:	e00a      	b.n	8000256 <getKeyInput+0x7e>
		else KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000244:	482d      	ldr	r0, [pc, #180]	; (80002fc <getKeyInput+0x124>)
 8000246:	f001 fea3 	bl	8001f90 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	4619      	mov	r1, r3
 800024e:	4a2a      	ldr	r2, [pc, #168]	; (80002f8 <getKeyInput+0x120>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i]))
 8000256:	4a26      	ldr	r2, [pc, #152]	; (80002f0 <getKeyInput+0x118>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4926      	ldr	r1, [pc, #152]	; (80002f8 <getKeyInput+0x120>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d136      	bne.n	80002d8 <getKeyInput+0x100>
 800026a:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <getKeyInput+0x118>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	4920      	ldr	r1, [pc, #128]	; (80002f4 <getKeyInput+0x11c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d12c      	bne.n	80002d8 <getKeyInput+0x100>
		{
			if (KeyReg2[i] != KeyReg3[i])
 800027e:	4a1d      	ldr	r2, [pc, #116]	; (80002f4 <getKeyInput+0x11c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	491e      	ldr	r1, [pc, #120]	; (8000300 <getKeyInput+0x128>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d014      	beq.n	80002bc <getKeyInput+0xe4>
			{
				KeyReg3[i] = KeyReg2[i];
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <getKeyInput+0x11c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	4919      	ldr	r1, [pc, #100]	; (8000300 <getKeyInput+0x128>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE)
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <getKeyInput+0x128>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d114      	bne.n	80002d8 <getKeyInput+0x100>
				{
					subkeyProcess(i);
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff82 	bl	80001b8 <subkeyProcess>
					TimeOutForKeyPress = 200;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <getKeyInput+0x12c>)
 80002b6:	22c8      	movs	r2, #200	; 0xc8
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e00d      	b.n	80002d8 <getKeyInput+0x100>
				}
			}
			else
			{
				TimeOutForKeyPress--;
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <getKeyInput+0x12c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <getKeyInput+0x12c>)
 80002c4:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0)
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <getKeyInput+0x12c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d104      	bne.n	80002d8 <getKeyInput+0x100>
				{
					KeyReg3[i] = NORMAL_STATE;
 80002ce:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <getKeyInput+0x128>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2101      	movs	r1, #1
 80002d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	f77f af7f 	ble.w	80001e4 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000000c 	.word	0x2000000c
 80002f4:	20000018 	.word	0x20000018
 80002f8:	20000000 	.word	0x20000000
 80002fc:	40010800 	.word	0x40010800
 8000300:	20000024 	.word	0x20000024
 8000304:	20000030 	.word	0x20000030

08000308 <fsm_automatic_run>:

int substatus = 0;
int tempdec_red, tempdec_amber, tempdec_green;

void fsm_automatic_run()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	switch (status)
 800030c:	4ba5      	ldr	r3, [pc, #660]	; (80005a4 <fsm_automatic_run+0x29c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	2b04      	cmp	r3, #4
 8000314:	f200 8263 	bhi.w	80007de <fsm_automatic_run+0x4d6>
 8000318:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <fsm_automatic_run+0x18>)
 800031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031e:	bf00      	nop
 8000320:	08000335 	.word	0x08000335
 8000324:	08000373 	.word	0x08000373
 8000328:	0800048d 	.word	0x0800048d
 800032c:	080005d5 	.word	0x080005d5
 8000330:	080006d1 	.word	0x080006d1
	{
		case INIT:
			status = AUTO_RED_GREEN;
 8000334:	4b9b      	ldr	r3, [pc, #620]	; (80005a4 <fsm_automatic_run+0x29c>)
 8000336:	2202      	movs	r2, #2
 8000338:	601a      	str	r2, [r3, #0]
			OffLight();
 800033a:	f001 fa51 	bl	80017e0 <OffLight>
			setTimer1(green * 500);
 800033e:	4b9a      	ldr	r3, [pc, #616]	; (80005a8 <fsm_automatic_run+0x2a0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000346:	fb02 f303 	mul.w	r3, r2, r3
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f936 	bl	80015bc <setTimer1>
			setTimer3(500);
 8000350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000354:	f001 f966 	bl	8001624 <setTimer3>
			tempdec_red = red;
 8000358:	4b94      	ldr	r3, [pc, #592]	; (80005ac <fsm_automatic_run+0x2a4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a94      	ldr	r2, [pc, #592]	; (80005b0 <fsm_automatic_run+0x2a8>)
 800035e:	6013      	str	r3, [r2, #0]
			tempdec_amber = amber;
 8000360:	4b94      	ldr	r3, [pc, #592]	; (80005b4 <fsm_automatic_run+0x2ac>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a94      	ldr	r2, [pc, #592]	; (80005b8 <fsm_automatic_run+0x2b0>)
 8000366:	6013      	str	r3, [r2, #0]
			tempdec_green = green;
 8000368:	4b8f      	ldr	r3, [pc, #572]	; (80005a8 <fsm_automatic_run+0x2a0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a93      	ldr	r2, [pc, #588]	; (80005bc <fsm_automatic_run+0x2b4>)
 800036e:	6013      	str	r3, [r2, #0]
			break;
 8000370:	e23e      	b.n	80007f0 <fsm_automatic_run+0x4e8>
		case AUTO_RED_GREEN:
			RedGreen();
 8000372:	f001 fa5d 	bl	8001830 <RedGreen>
			if (timer1_flag == 1)
 8000376:	4b92      	ldr	r3, [pc, #584]	; (80005c0 <fsm_automatic_run+0x2b8>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d117      	bne.n	80003ae <fsm_automatic_run+0xa6>
			{
				status = AUTO_RED_AMBER;
 800037e:	4b89      	ldr	r3, [pc, #548]	; (80005a4 <fsm_automatic_run+0x29c>)
 8000380:	2203      	movs	r2, #3
 8000382:	601a      	str	r2, [r3, #0]
				setTimer1(amber * 500);
 8000384:	4b8b      	ldr	r3, [pc, #556]	; (80005b4 <fsm_automatic_run+0x2ac>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	4618      	mov	r0, r3
 8000392:	f001 f913 	bl	80015bc <setTimer1>
				timer2_flag = 1;
 8000396:	4b8b      	ldr	r3, [pc, #556]	; (80005c4 <fsm_automatic_run+0x2bc>)
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
				tempdec_red--;
 800039c:	4b84      	ldr	r3, [pc, #528]	; (80005b0 <fsm_automatic_run+0x2a8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	4a83      	ldr	r2, [pc, #524]	; (80005b0 <fsm_automatic_run+0x2a8>)
 80003a4:	6013      	str	r3, [r2, #0]
				setTimer3(500);
 80003a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003aa:	f001 f93b 	bl	8001624 <setTimer3>
			}
			if (timer2_flag == 1)
 80003ae:	4b85      	ldr	r3, [pc, #532]	; (80005c4 <fsm_automatic_run+0x2bc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d149      	bne.n	800044a <fsm_automatic_run+0x142>
			{
				setTimer2(250);
 80003b6:	20fa      	movs	r0, #250	; 0xfa
 80003b8:	f001 f91a 	bl	80015f0 <setTimer2>
				switch(substatus)
 80003bc:	4b82      	ldr	r3, [pc, #520]	; (80005c8 <fsm_automatic_run+0x2c0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <fsm_automatic_run+0xc2>
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d01c      	beq.n	8000402 <fsm_automatic_run+0xfa>
						display7SEG_2(tempdec_red % 10, 1);
						display7SEG(tempdec_green % 10, 1);
						substatus = 0;
						break;
					default:
						break;
 80003c8:	e040      	b.n	800044c <fsm_automatic_run+0x144>
						display7SEG_2(tempdec_red / 10, 0);
 80003ca:	4b79      	ldr	r3, [pc, #484]	; (80005b0 <fsm_automatic_run+0x2a8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a7f      	ldr	r2, [pc, #508]	; (80005cc <fsm_automatic_run+0x2c4>)
 80003d0:	fb82 1203 	smull	r1, r2, r2, r3
 80003d4:	1092      	asrs	r2, r2, #2
 80003d6:	17db      	asrs	r3, r3, #31
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fdc9 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_green / 10, 0);
 80003e2:	4b76      	ldr	r3, [pc, #472]	; (80005bc <fsm_automatic_run+0x2b4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a79      	ldr	r2, [pc, #484]	; (80005cc <fsm_automatic_run+0x2c4>)
 80003e8:	fb82 1203 	smull	r1, r2, r2, r3
 80003ec:	1092      	asrs	r2, r2, #2
 80003ee:	17db      	asrs	r3, r3, #31
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fbfd 	bl	8000bf4 <display7SEG>
						substatus = 1;
 80003fa:	4b73      	ldr	r3, [pc, #460]	; (80005c8 <fsm_automatic_run+0x2c0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]
						break;
 8000400:	e024      	b.n	800044c <fsm_automatic_run+0x144>
						display7SEG_2(tempdec_red % 10, 1);
 8000402:	4b6b      	ldr	r3, [pc, #428]	; (80005b0 <fsm_automatic_run+0x2a8>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b71      	ldr	r3, [pc, #452]	; (80005cc <fsm_automatic_run+0x2c4>)
 8000408:	fb83 1302 	smull	r1, r3, r3, r2
 800040c:	1099      	asrs	r1, r3, #2
 800040e:	17d3      	asrs	r3, r2, #31
 8000410:	1ac8      	subs	r0, r1, r3
 8000412:	4603      	mov	r3, r0
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4403      	add	r3, r0
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	1ad0      	subs	r0, r2, r3
 800041c:	2101      	movs	r1, #1
 800041e:	f000 fda9 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_green % 10, 1);
 8000422:	4b66      	ldr	r3, [pc, #408]	; (80005bc <fsm_automatic_run+0x2b4>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b69      	ldr	r3, [pc, #420]	; (80005cc <fsm_automatic_run+0x2c4>)
 8000428:	fb83 1302 	smull	r1, r3, r3, r2
 800042c:	1099      	asrs	r1, r3, #2
 800042e:	17d3      	asrs	r3, r2, #31
 8000430:	1ac8      	subs	r0, r1, r3
 8000432:	4603      	mov	r3, r0
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4403      	add	r3, r0
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	1ad0      	subs	r0, r2, r3
 800043c:	2101      	movs	r1, #1
 800043e:	f000 fbd9 	bl	8000bf4 <display7SEG>
						substatus = 0;
 8000442:	4b61      	ldr	r3, [pc, #388]	; (80005c8 <fsm_automatic_run+0x2c0>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
						break;
 8000448:	e000      	b.n	800044c <fsm_automatic_run+0x144>
				}

			}
 800044a:	bf00      	nop
			if (timer3_flag == 1)
 800044c:	4b60      	ldr	r3, [pc, #384]	; (80005d0 <fsm_automatic_run+0x2c8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d10d      	bne.n	8000470 <fsm_automatic_run+0x168>
			{
				setTimer3(500);
 8000454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000458:	f001 f8e4 	bl	8001624 <setTimer3>
				tempdec_red--;
 800045c:	4b54      	ldr	r3, [pc, #336]	; (80005b0 <fsm_automatic_run+0x2a8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b01      	subs	r3, #1
 8000462:	4a53      	ldr	r2, [pc, #332]	; (80005b0 <fsm_automatic_run+0x2a8>)
 8000464:	6013      	str	r3, [r2, #0]
				tempdec_green--;
 8000466:	4b55      	ldr	r3, [pc, #340]	; (80005bc <fsm_automatic_run+0x2b4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3b01      	subs	r3, #1
 800046c:	4a53      	ldr	r2, [pc, #332]	; (80005bc <fsm_automatic_run+0x2b4>)
 800046e:	6013      	str	r3, [r2, #0]
			}

			if (isButton1Pressed() == 1)
 8000470:	f7ff fe6c 	bl	800014c <isButton1Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	f040 81b3 	bne.w	80007e2 <fsm_automatic_run+0x4da>
			{
				status = MODE_1;
 800047c:	4b49      	ldr	r3, [pc, #292]	; (80005a4 <fsm_automatic_run+0x29c>)
 800047e:	220c      	movs	r2, #12
 8000480:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000482:	f242 7010 	movw	r0, #10000	; 0x2710
 8000486:	f001 f899 	bl	80015bc <setTimer1>
			}
			break;
 800048a:	e1aa      	b.n	80007e2 <fsm_automatic_run+0x4da>
		case AUTO_RED_AMBER:
			RedAmber();
 800048c:	f001 f9f8 	bl	8001880 <RedAmber>
			if (timer1_flag == 1)
 8000490:	4b4b      	ldr	r3, [pc, #300]	; (80005c0 <fsm_automatic_run+0x2b8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d11e      	bne.n	80004d6 <fsm_automatic_run+0x1ce>
			{
				status = AUTO_GREEN_RED;
 8000498:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <fsm_automatic_run+0x29c>)
 800049a:	2204      	movs	r2, #4
 800049c:	601a      	str	r2, [r3, #0]
				setTimer1(green * 500);
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <fsm_automatic_run+0x2a0>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f886 	bl	80015bc <setTimer1>
				timer2_flag = 1;
 80004b0:	4b44      	ldr	r3, [pc, #272]	; (80005c4 <fsm_automatic_run+0x2bc>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 80004b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ba:	f001 f8b3 	bl	8001624 <setTimer3>
				tempdec_red = red;
 80004be:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <fsm_automatic_run+0x2a4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a3b      	ldr	r2, [pc, #236]	; (80005b0 <fsm_automatic_run+0x2a8>)
 80004c4:	6013      	str	r3, [r2, #0]
				tempdec_green = green;
 80004c6:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <fsm_automatic_run+0x2a0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a3c      	ldr	r2, [pc, #240]	; (80005bc <fsm_automatic_run+0x2b4>)
 80004cc:	6013      	str	r3, [r2, #0]
				tempdec_amber = amber;
 80004ce:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <fsm_automatic_run+0x2ac>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a39      	ldr	r2, [pc, #228]	; (80005b8 <fsm_automatic_run+0x2b0>)
 80004d4:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1)
 80004d6:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <fsm_automatic_run+0x2bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d149      	bne.n	8000572 <fsm_automatic_run+0x26a>
			{
				setTimer2(250);
 80004de:	20fa      	movs	r0, #250	; 0xfa
 80004e0:	f001 f886 	bl	80015f0 <setTimer2>
				switch(substatus)
 80004e4:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <fsm_automatic_run+0x2c0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <fsm_automatic_run+0x1ea>
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d01c      	beq.n	800052a <fsm_automatic_run+0x222>
						display7SEG_2(tempdec_red % 10, 1);
						display7SEG(tempdec_amber % 10, 1);
						substatus = 0;
						break;
					default:
						break;
 80004f0:	e040      	b.n	8000574 <fsm_automatic_run+0x26c>
						display7SEG_2(tempdec_red / 10, 0);
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <fsm_automatic_run+0x2a8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a35      	ldr	r2, [pc, #212]	; (80005cc <fsm_automatic_run+0x2c4>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	1092      	asrs	r2, r2, #2
 80004fe:	17db      	asrs	r3, r3, #31
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fd35 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_amber / 10, 0);
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <fsm_automatic_run+0x2b0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a2f      	ldr	r2, [pc, #188]	; (80005cc <fsm_automatic_run+0x2c4>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1092      	asrs	r2, r2, #2
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb69 	bl	8000bf4 <display7SEG>
						substatus = 1;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <fsm_automatic_run+0x2c0>)
 8000524:	2201      	movs	r2, #1
 8000526:	601a      	str	r2, [r3, #0]
						break;
 8000528:	e024      	b.n	8000574 <fsm_automatic_run+0x26c>
						display7SEG_2(tempdec_red % 10, 1);
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <fsm_automatic_run+0x2a8>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <fsm_automatic_run+0x2c4>)
 8000530:	fb83 1302 	smull	r1, r3, r3, r2
 8000534:	1099      	asrs	r1, r3, #2
 8000536:	17d3      	asrs	r3, r2, #31
 8000538:	1ac8      	subs	r0, r1, r3
 800053a:	4603      	mov	r3, r0
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4403      	add	r3, r0
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	1ad0      	subs	r0, r2, r3
 8000544:	2101      	movs	r1, #1
 8000546:	f000 fd15 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_amber % 10, 1);
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <fsm_automatic_run+0x2b0>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <fsm_automatic_run+0x2c4>)
 8000550:	fb83 1302 	smull	r1, r3, r3, r2
 8000554:	1099      	asrs	r1, r3, #2
 8000556:	17d3      	asrs	r3, r2, #31
 8000558:	1ac8      	subs	r0, r1, r3
 800055a:	4603      	mov	r3, r0
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4403      	add	r3, r0
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	1ad0      	subs	r0, r2, r3
 8000564:	2101      	movs	r1, #1
 8000566:	f000 fb45 	bl	8000bf4 <display7SEG>
						substatus = 0;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <fsm_automatic_run+0x2c0>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
						break;
 8000570:	e000      	b.n	8000574 <fsm_automatic_run+0x26c>
				}

			}
 8000572:	bf00      	nop
			if (timer3_flag == 1)
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <fsm_automatic_run+0x2c8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	f040 8134 	bne.w	80007e6 <fsm_automatic_run+0x4de>
			{
				setTimer3(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000582:	f001 f84f 	bl	8001624 <setTimer3>
				timer2_flag = 1;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <fsm_automatic_run+0x2bc>)
 8000588:	2201      	movs	r2, #1
 800058a:	601a      	str	r2, [r3, #0]
				tempdec_red--;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <fsm_automatic_run+0x2a8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <fsm_automatic_run+0x2a8>)
 8000594:	6013      	str	r3, [r2, #0]
				tempdec_amber--;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <fsm_automatic_run+0x2b0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <fsm_automatic_run+0x2b0>)
 800059e:	6013      	str	r3, [r2, #0]
			}

			break;
 80005a0:	e121      	b.n	80007e6 <fsm_automatic_run+0x4de>
 80005a2:	bf00      	nop
 80005a4:	20000074 	.word	0x20000074
 80005a8:	200000b8 	.word	0x200000b8
 80005ac:	200000bc 	.word	0x200000bc
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	200000b4 	.word	0x200000b4
 80005b8:	200000b0 	.word	0x200000b0
 80005bc:	200000ac 	.word	0x200000ac
 80005c0:	20000078 	.word	0x20000078
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	2000006c 	.word	0x2000006c
 80005cc:	66666667 	.word	0x66666667
 80005d0:	20000080 	.word	0x20000080
		case AUTO_GREEN_RED:
			GreenRed();
 80005d4:	f001 f97c 	bl	80018d0 <GreenRed>
			if (timer1_flag == 1)
 80005d8:	4b86      	ldr	r3, [pc, #536]	; (80007f4 <fsm_automatic_run+0x4ec>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d114      	bne.n	800060a <fsm_automatic_run+0x302>
			{
				status = AUTO_AMBER_RED;
 80005e0:	4b85      	ldr	r3, [pc, #532]	; (80007f8 <fsm_automatic_run+0x4f0>)
 80005e2:	2205      	movs	r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
				setTimer1(amber * 500);
 80005e6:	4b85      	ldr	r3, [pc, #532]	; (80007fc <fsm_automatic_run+0x4f4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ffe2 	bl	80015bc <setTimer1>
				tempdec_red--;
 80005f8:	4b81      	ldr	r3, [pc, #516]	; (8000800 <fsm_automatic_run+0x4f8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a80      	ldr	r2, [pc, #512]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000600:	6013      	str	r3, [r2, #0]
				setTimer3(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000606:	f001 f80d 	bl	8001624 <setTimer3>
			}
			if (timer2_flag == 1)
 800060a:	4b7e      	ldr	r3, [pc, #504]	; (8000804 <fsm_automatic_run+0x4fc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d149      	bne.n	80006a6 <fsm_automatic_run+0x39e>
			{
				setTimer2(250);
 8000612:	20fa      	movs	r0, #250	; 0xfa
 8000614:	f000 ffec 	bl	80015f0 <setTimer2>
				switch(substatus)
 8000618:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <fsm_automatic_run+0x500>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <fsm_automatic_run+0x31e>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d01c      	beq.n	800065e <fsm_automatic_run+0x356>
						display7SEG_2(tempdec_green % 10, 1);
						display7SEG(tempdec_red % 10, 1);
						substatus = 0;
						break;
					default:
						break;
 8000624:	e040      	b.n	80006a8 <fsm_automatic_run+0x3a0>
						display7SEG_2(tempdec_green / 10, 0);
 8000626:	4b79      	ldr	r3, [pc, #484]	; (800080c <fsm_automatic_run+0x504>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a79      	ldr	r2, [pc, #484]	; (8000810 <fsm_automatic_run+0x508>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	1092      	asrs	r2, r2, #2
 8000632:	17db      	asrs	r3, r3, #31
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fc9b 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_red / 10, 0);
 800063e:	4b70      	ldr	r3, [pc, #448]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a73      	ldr	r2, [pc, #460]	; (8000810 <fsm_automatic_run+0x508>)
 8000644:	fb82 1203 	smull	r1, r2, r2, r3
 8000648:	1092      	asrs	r2, r2, #2
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f000 facf 	bl	8000bf4 <display7SEG>
						substatus = 1;
 8000656:	4b6c      	ldr	r3, [pc, #432]	; (8000808 <fsm_automatic_run+0x500>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
						break;
 800065c:	e024      	b.n	80006a8 <fsm_automatic_run+0x3a0>
						display7SEG_2(tempdec_green % 10, 1);
 800065e:	4b6b      	ldr	r3, [pc, #428]	; (800080c <fsm_automatic_run+0x504>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b6b      	ldr	r3, [pc, #428]	; (8000810 <fsm_automatic_run+0x508>)
 8000664:	fb83 1302 	smull	r1, r3, r3, r2
 8000668:	1099      	asrs	r1, r3, #2
 800066a:	17d3      	asrs	r3, r2, #31
 800066c:	1ac8      	subs	r0, r1, r3
 800066e:	4603      	mov	r3, r0
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4403      	add	r3, r0
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	1ad0      	subs	r0, r2, r3
 8000678:	2101      	movs	r1, #1
 800067a:	f000 fc7b 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_red % 10, 1);
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b63      	ldr	r3, [pc, #396]	; (8000810 <fsm_automatic_run+0x508>)
 8000684:	fb83 1302 	smull	r1, r3, r3, r2
 8000688:	1099      	asrs	r1, r3, #2
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac8      	subs	r0, r1, r3
 800068e:	4603      	mov	r3, r0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4403      	add	r3, r0
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	1ad0      	subs	r0, r2, r3
 8000698:	2101      	movs	r1, #1
 800069a:	f000 faab 	bl	8000bf4 <display7SEG>
						substatus = 0;
 800069e:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <fsm_automatic_run+0x500>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
						break;
 80006a4:	e000      	b.n	80006a8 <fsm_automatic_run+0x3a0>
				}

			}
 80006a6:	bf00      	nop
			if (timer3_flag == 1)
 80006a8:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <fsm_automatic_run+0x50c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	f040 809c 	bne.w	80007ea <fsm_automatic_run+0x4e2>
			{
				setTimer3(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 ffb5 	bl	8001624 <setTimer3>
				tempdec_red--;
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <fsm_automatic_run+0x4f8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a4f      	ldr	r2, [pc, #316]	; (8000800 <fsm_automatic_run+0x4f8>)
 80006c2:	6013      	str	r3, [r2, #0]
				tempdec_green--;
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <fsm_automatic_run+0x504>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	4a50      	ldr	r2, [pc, #320]	; (800080c <fsm_automatic_run+0x504>)
 80006cc:	6013      	str	r3, [r2, #0]
			}
			break;
 80006ce:	e08c      	b.n	80007ea <fsm_automatic_run+0x4e2>
		case AUTO_AMBER_RED:
			AmberRed();
 80006d0:	f001 f926 	bl	8001920 <AmberRed>
			if (timer1_flag == 1)
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <fsm_automatic_run+0x4ec>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d11e      	bne.n	800071a <fsm_automatic_run+0x412>
			{
				status = AUTO_RED_GREEN;
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <fsm_automatic_run+0x4f0>)
 80006de:	2202      	movs	r2, #2
 80006e0:	601a      	str	r2, [r3, #0]
				setTimer1(green * 500);
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <fsm_automatic_run+0x510>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 ff64 	bl	80015bc <setTimer1>
				timer2_flag = 1;
 80006f4:	4b43      	ldr	r3, [pc, #268]	; (8000804 <fsm_automatic_run+0x4fc>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 80006fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fe:	f000 ff91 	bl	8001624 <setTimer3>
				tempdec_red = red;
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <fsm_automatic_run+0x514>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a3e      	ldr	r2, [pc, #248]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000708:	6013      	str	r3, [r2, #0]
				tempdec_green = green;
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <fsm_automatic_run+0x510>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <fsm_automatic_run+0x504>)
 8000710:	6013      	str	r3, [r2, #0]
				tempdec_amber = amber;
 8000712:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <fsm_automatic_run+0x4f4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <fsm_automatic_run+0x518>)
 8000718:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1)
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <fsm_automatic_run+0x4fc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d149      	bne.n	80007b6 <fsm_automatic_run+0x4ae>
			{
				setTimer2(250);
 8000722:	20fa      	movs	r0, #250	; 0xfa
 8000724:	f000 ff64 	bl	80015f0 <setTimer2>
				switch(substatus)
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <fsm_automatic_run+0x500>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <fsm_automatic_run+0x42e>
 8000730:	2b01      	cmp	r3, #1
 8000732:	d01c      	beq.n	800076e <fsm_automatic_run+0x466>
						display7SEG_2(tempdec_red % 10, 1);
						display7SEG(tempdec_amber % 10, 1);
						substatus = 0;
						break;
					default:
						break;
 8000734:	e040      	b.n	80007b8 <fsm_automatic_run+0x4b0>
						display7SEG_2(tempdec_red / 10, 0);
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a35      	ldr	r2, [pc, #212]	; (8000810 <fsm_automatic_run+0x508>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1092      	asrs	r2, r2, #2
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fc13 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_amber / 10, 0);
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <fsm_automatic_run+0x518>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <fsm_automatic_run+0x508>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1092      	asrs	r2, r2, #2
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa47 	bl	8000bf4 <display7SEG>
						substatus = 1;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <fsm_automatic_run+0x500>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
						break;
 800076c:	e024      	b.n	80007b8 <fsm_automatic_run+0x4b0>
						display7SEG_2(tempdec_red % 10, 1);
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <fsm_automatic_run+0x4f8>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <fsm_automatic_run+0x508>)
 8000774:	fb83 1302 	smull	r1, r3, r3, r2
 8000778:	1099      	asrs	r1, r3, #2
 800077a:	17d3      	asrs	r3, r2, #31
 800077c:	1ac8      	subs	r0, r1, r3
 800077e:	4603      	mov	r3, r0
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4403      	add	r3, r0
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	1ad0      	subs	r0, r2, r3
 8000788:	2101      	movs	r1, #1
 800078a:	f000 fbf3 	bl	8000f74 <display7SEG_2>
						display7SEG(tempdec_amber % 10, 1);
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <fsm_automatic_run+0x518>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <fsm_automatic_run+0x508>)
 8000794:	fb83 1302 	smull	r1, r3, r3, r2
 8000798:	1099      	asrs	r1, r3, #2
 800079a:	17d3      	asrs	r3, r2, #31
 800079c:	1ac8      	subs	r0, r1, r3
 800079e:	4603      	mov	r3, r0
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4403      	add	r3, r0
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	1ad0      	subs	r0, r2, r3
 80007a8:	2101      	movs	r1, #1
 80007aa:	f000 fa23 	bl	8000bf4 <display7SEG>
						substatus = 0;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <fsm_automatic_run+0x500>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
						break;
 80007b4:	e000      	b.n	80007b8 <fsm_automatic_run+0x4b0>
				}

			}
 80007b6:	bf00      	nop
			if (timer3_flag == 1)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <fsm_automatic_run+0x50c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d116      	bne.n	80007ee <fsm_automatic_run+0x4e6>
			{
				setTimer3(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f000 ff2e 	bl	8001624 <setTimer3>
				tempdec_red--;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <fsm_automatic_run+0x4f8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <fsm_automatic_run+0x4f8>)
 80007d0:	6013      	str	r3, [r2, #0]
				tempdec_amber--;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <fsm_automatic_run+0x518>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a11      	ldr	r2, [pc, #68]	; (8000820 <fsm_automatic_run+0x518>)
 80007da:	6013      	str	r3, [r2, #0]
			}
			break;
 80007dc:	e007      	b.n	80007ee <fsm_automatic_run+0x4e6>
		default:
			break;
 80007de:	bf00      	nop
 80007e0:	e006      	b.n	80007f0 <fsm_automatic_run+0x4e8>
			break;
 80007e2:	bf00      	nop
 80007e4:	e004      	b.n	80007f0 <fsm_automatic_run+0x4e8>
			break;
 80007e6:	bf00      	nop
 80007e8:	e002      	b.n	80007f0 <fsm_automatic_run+0x4e8>
			break;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <fsm_automatic_run+0x4e8>
			break;
 80007ee:	bf00      	nop
	}
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000078 	.word	0x20000078
 80007f8:	20000074 	.word	0x20000074
 80007fc:	200000b4 	.word	0x200000b4
 8000800:	200000a8 	.word	0x200000a8
 8000804:	2000007c 	.word	0x2000007c
 8000808:	2000006c 	.word	0x2000006c
 800080c:	200000ac 	.word	0x200000ac
 8000810:	66666667 	.word	0x66666667
 8000814:	20000080 	.word	0x20000080
 8000818:	200000b8 	.word	0x200000b8
 800081c:	200000bc 	.word	0x200000bc
 8000820:	200000b0 	.word	0x200000b0

08000824 <blinking_mode_01>:
#include "fsm_manual.h"

int sub_status = 0;

void blinking_mode_01()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	if (timer2_flag == 1)
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <blinking_mode_01+0x58>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d121      	bne.n	8000874 <blinking_mode_01+0x50>
	{
		setTimer2(250);
 8000830:	20fa      	movs	r0, #250	; 0xfa
 8000832:	f000 fedd 	bl	80015f0 <setTimer2>
		switch(sub_status)
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <blinking_mode_01+0x5c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <blinking_mode_01+0x20>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d00c      	beq.n	800085c <blinking_mode_01+0x38>
				display7SEG_2(0, 0);
				display7SEG(1, 1);
				sub_status = 0;
				break;
			default:
				break;
 8000842:	e018      	b.n	8000876 <blinking_mode_01+0x52>
				display7SEG_2(0, 0);
 8000844:	2100      	movs	r1, #0
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fb94 	bl	8000f74 <display7SEG_2>
				display7SEG(0, 0);
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f9d0 	bl	8000bf4 <display7SEG>
				sub_status = 1;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <blinking_mode_01+0x5c>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
				break;
 800085a:	e00c      	b.n	8000876 <blinking_mode_01+0x52>
				display7SEG_2(0, 0);
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fb88 	bl	8000f74 <display7SEG_2>
				display7SEG(1, 1);
 8000864:	2101      	movs	r1, #1
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f9c4 	bl	8000bf4 <display7SEG>
				sub_status = 0;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <blinking_mode_01+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
				break;
 8000872:	e000      	b.n	8000876 <blinking_mode_01+0x52>
		}

	}
 8000874:	bf00      	nop
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000007c 	.word	0x2000007c
 8000880:	20000070 	.word	0x20000070

08000884 <blinking_mode_02>:

void blinking_mode_02()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	if (timer2_flag == 1)
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <blinking_mode_02+0x80>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d135      	bne.n	80008fc <blinking_mode_02+0x78>
	{
		setTimer2(250);
 8000890:	20fa      	movs	r0, #250	; 0xfa
 8000892:	f000 fead 	bl	80015f0 <setTimer2>
		switch(sub_status)
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <blinking_mode_02+0x84>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <blinking_mode_02+0x20>
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d014      	beq.n	80008cc <blinking_mode_02+0x48>
				display7SEG_2(red % 10, 1);
				display7SEG(2, 1);
				sub_status = 0;
				break;
			default:
				break;
 80008a2:	e02c      	b.n	80008fe <blinking_mode_02+0x7a>
				display7SEG_2(red / 10, 0);
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <blinking_mode_02+0x88>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <blinking_mode_02+0x8c>)
 80008aa:	fb82 1203 	smull	r1, r2, r2, r3
 80008ae:	1092      	asrs	r2, r2, #2
 80008b0:	17db      	asrs	r3, r3, #31
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb5c 	bl	8000f74 <display7SEG_2>
				display7SEG(0, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f998 	bl	8000bf4 <display7SEG>
				sub_status = 1;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <blinking_mode_02+0x84>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
				break;
 80008ca:	e018      	b.n	80008fe <blinking_mode_02+0x7a>
				display7SEG_2(red % 10, 1);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <blinking_mode_02+0x88>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <blinking_mode_02+0x8c>)
 80008d2:	fb83 1302 	smull	r1, r3, r3, r2
 80008d6:	1099      	asrs	r1, r3, #2
 80008d8:	17d3      	asrs	r3, r2, #31
 80008da:	1ac8      	subs	r0, r1, r3
 80008dc:	4603      	mov	r3, r0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4403      	add	r3, r0
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1ad0      	subs	r0, r2, r3
 80008e6:	2101      	movs	r1, #1
 80008e8:	f000 fb44 	bl	8000f74 <display7SEG_2>
				display7SEG(2, 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 f980 	bl	8000bf4 <display7SEG>
				sub_status = 0;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <blinking_mode_02+0x84>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
				break;
 80008fa:	e000      	b.n	80008fe <blinking_mode_02+0x7a>
		}

	}
 80008fc:	bf00      	nop
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000007c 	.word	0x2000007c
 8000908:	20000070 	.word	0x20000070
 800090c:	200000bc 	.word	0x200000bc
 8000910:	66666667 	.word	0x66666667

08000914 <blinking_mode_03>:

void blinking_mode_03()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	if (timer2_flag == 1)
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <blinking_mode_03+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d135      	bne.n	800098c <blinking_mode_03+0x78>
	{
		setTimer2(250);
 8000920:	20fa      	movs	r0, #250	; 0xfa
 8000922:	f000 fe65 	bl	80015f0 <setTimer2>
		switch(sub_status)
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <blinking_mode_03+0x84>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <blinking_mode_03+0x20>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d014      	beq.n	800095c <blinking_mode_03+0x48>
				display7SEG_2(amber % 10, 1);
				display7SEG(3, 1);
				sub_status = 0;
				break;
			default:
				break;
 8000932:	e02c      	b.n	800098e <blinking_mode_03+0x7a>
				display7SEG_2(amber / 10, 0);
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <blinking_mode_03+0x88>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <blinking_mode_03+0x8c>)
 800093a:	fb82 1203 	smull	r1, r2, r2, r3
 800093e:	1092      	asrs	r2, r2, #2
 8000940:	17db      	asrs	r3, r3, #31
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fb14 	bl	8000f74 <display7SEG_2>
				display7SEG(0, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f950 	bl	8000bf4 <display7SEG>
				sub_status = 1;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <blinking_mode_03+0x84>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
				break;
 800095a:	e018      	b.n	800098e <blinking_mode_03+0x7a>
				display7SEG_2(amber % 10, 1);
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <blinking_mode_03+0x88>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <blinking_mode_03+0x8c>)
 8000962:	fb83 1302 	smull	r1, r3, r3, r2
 8000966:	1099      	asrs	r1, r3, #2
 8000968:	17d3      	asrs	r3, r2, #31
 800096a:	1ac8      	subs	r0, r1, r3
 800096c:	4603      	mov	r3, r0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4403      	add	r3, r0
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	1ad0      	subs	r0, r2, r3
 8000976:	2101      	movs	r1, #1
 8000978:	f000 fafc 	bl	8000f74 <display7SEG_2>
				display7SEG(3, 1);
 800097c:	2101      	movs	r1, #1
 800097e:	2003      	movs	r0, #3
 8000980:	f000 f938 	bl	8000bf4 <display7SEG>
				sub_status = 0;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <blinking_mode_03+0x84>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
				break;
 800098a:	e000      	b.n	800098e <blinking_mode_03+0x7a>
		}

	}
 800098c:	bf00      	nop
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000007c 	.word	0x2000007c
 8000998:	20000070 	.word	0x20000070
 800099c:	200000b4 	.word	0x200000b4
 80009a0:	66666667 	.word	0x66666667

080009a4 <blinking_mode_04>:

void blinking_mode_04()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	if (timer2_flag == 1)
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <blinking_mode_04+0x80>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d135      	bne.n	8000a1c <blinking_mode_04+0x78>
	{
		setTimer2(250);
 80009b0:	20fa      	movs	r0, #250	; 0xfa
 80009b2:	f000 fe1d 	bl	80015f0 <setTimer2>
		switch(sub_status)
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <blinking_mode_04+0x84>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <blinking_mode_04+0x20>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d014      	beq.n	80009ec <blinking_mode_04+0x48>
				display7SEG_2(green % 10, 1);
				display7SEG(4, 1);
				sub_status = 0;
				break;
			default:
				break;
 80009c2:	e02c      	b.n	8000a1e <blinking_mode_04+0x7a>
				display7SEG_2(green / 10, 0);
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <blinking_mode_04+0x88>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <blinking_mode_04+0x8c>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1092      	asrs	r2, r2, #2
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 facc 	bl	8000f74 <display7SEG_2>
				display7SEG(0, 0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f908 	bl	8000bf4 <display7SEG>
				sub_status = 1;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <blinking_mode_04+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
				break;
 80009ea:	e018      	b.n	8000a1e <blinking_mode_04+0x7a>
				display7SEG_2(green % 10, 1);
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <blinking_mode_04+0x88>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <blinking_mode_04+0x8c>)
 80009f2:	fb83 1302 	smull	r1, r3, r3, r2
 80009f6:	1099      	asrs	r1, r3, #2
 80009f8:	17d3      	asrs	r3, r2, #31
 80009fa:	1ac8      	subs	r0, r1, r3
 80009fc:	4603      	mov	r3, r0
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4403      	add	r3, r0
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	1ad0      	subs	r0, r2, r3
 8000a06:	2101      	movs	r1, #1
 8000a08:	f000 fab4 	bl	8000f74 <display7SEG_2>
				display7SEG(4, 1);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f000 f8f0 	bl	8000bf4 <display7SEG>
				sub_status = 0;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <blinking_mode_04+0x84>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
				break;
 8000a1a:	e000      	b.n	8000a1e <blinking_mode_04+0x7a>
		}

	}
 8000a1c:	bf00      	nop
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000007c 	.word	0x2000007c
 8000a28:	20000070 	.word	0x20000070
 8000a2c:	200000b8 	.word	0x200000b8
 8000a30:	66666667 	.word	0x66666667

08000a34 <fsm_manual_run>:

void fsm_manual_run()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	switch (status)
 8000a38:	4b5f      	ldr	r3, [pc, #380]	; (8000bb8 <fsm_manual_run+0x184>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3b0c      	subs	r3, #12
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	f200 80af 	bhi.w	8000ba2 <fsm_manual_run+0x16e>
 8000a44:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <fsm_manual_run+0x18>)
 8000a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4a:	bf00      	nop
 8000a4c:	08000a5d 	.word	0x08000a5d
 8000a50:	08000a9b 	.word	0x08000a9b
 8000a54:	08000af3 	.word	0x08000af3
 8000a58:	08000b4b 	.word	0x08000b4b
	{
	case MODE_1:
		blinking_mode_01();
 8000a5c:	f7ff fee2 	bl	8000824 <blinking_mode_01>
		if (timer1_flag == 1)
 8000a60:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <fsm_manual_run+0x188>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d102      	bne.n	8000a6e <fsm_manual_run+0x3a>
		{
			status = INIT;
 8000a68:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <fsm_manual_run+0x184>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1)
 8000a6e:	f7ff fb6d 	bl	800014c <isButton1Pressed>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d106      	bne.n	8000a86 <fsm_manual_run+0x52>
		{
			setTimer1(10000);
 8000a78:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a7c:	f000 fd9e 	bl	80015bc <setTimer1>
			status = MODE_2;
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <fsm_manual_run+0x184>)
 8000a82:	220d      	movs	r2, #13
 8000a84:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1)
 8000a86:	f7ff fb85 	bl	8000194 <isButton3Pressed>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	f040 808a 	bne.w	8000ba6 <fsm_manual_run+0x172>
		{
			status = INIT;
 8000a92:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <fsm_manual_run+0x184>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a98:	e085      	b.n	8000ba6 <fsm_manual_run+0x172>
	case MODE_2:
		blinking_mode_02();
 8000a9a:	f7ff fef3 	bl	8000884 <blinking_mode_02>
		if (timer1_flag == 1)
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <fsm_manual_run+0x188>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d102      	bne.n	8000aac <fsm_manual_run+0x78>
		{
			status = INIT;
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <fsm_manual_run+0x184>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1)
 8000aac:	f7ff fb4e 	bl	800014c <isButton1Pressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d106      	bne.n	8000ac4 <fsm_manual_run+0x90>
		{
			setTimer1(10000);
 8000ab6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aba:	f000 fd7f 	bl	80015bc <setTimer1>
			status = MODE_3;
 8000abe:	4b3e      	ldr	r3, [pc, #248]	; (8000bb8 <fsm_manual_run+0x184>)
 8000ac0:	220e      	movs	r2, #14
 8000ac2:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1)
 8000ac4:	f7ff fb54 	bl	8000170 <isButton2Pressed>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d108      	bne.n	8000ae0 <fsm_manual_run+0xac>
		{
			setTimer1(10000);
 8000ace:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ad2:	f000 fd73 	bl	80015bc <setTimer1>
			red++;
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <fsm_manual_run+0x18c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a38      	ldr	r2, [pc, #224]	; (8000bc0 <fsm_manual_run+0x18c>)
 8000ade:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 8000ae0:	f7ff fb58 	bl	8000194 <isButton3Pressed>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d15f      	bne.n	8000baa <fsm_manual_run+0x176>
		{
			status = INIT;
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <fsm_manual_run+0x184>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
		}
		break;
 8000af0:	e05b      	b.n	8000baa <fsm_manual_run+0x176>
	case MODE_3:
		blinking_mode_03();
 8000af2:	f7ff ff0f 	bl	8000914 <blinking_mode_03>
		if (timer1_flag == 1)
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <fsm_manual_run+0x188>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <fsm_manual_run+0xd0>
		{
			status = INIT;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1)
 8000b04:	f7ff fb22 	bl	800014c <isButton1Pressed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d106      	bne.n	8000b1c <fsm_manual_run+0xe8>
		{
			setTimer1(10000);
 8000b0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b12:	f000 fd53 	bl	80015bc <setTimer1>
			status = MODE_4;
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b18:	220f      	movs	r2, #15
 8000b1a:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1)
 8000b1c:	f7ff fb28 	bl	8000170 <isButton2Pressed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d108      	bne.n	8000b38 <fsm_manual_run+0x104>
		{
			setTimer1(10000);
 8000b26:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b2a:	f000 fd47 	bl	80015bc <setTimer1>
			amber++;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <fsm_manual_run+0x190>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <fsm_manual_run+0x190>)
 8000b36:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 8000b38:	f7ff fb2c 	bl	8000194 <isButton3Pressed>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d135      	bne.n	8000bae <fsm_manual_run+0x17a>
		{
			status = INIT;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b48:	e031      	b.n	8000bae <fsm_manual_run+0x17a>
	case MODE_4:
		blinking_mode_04();
 8000b4a:	f7ff ff2b 	bl	80009a4 <blinking_mode_04>
		if (timer1_flag == 1)
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <fsm_manual_run+0x188>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d102      	bne.n	8000b5c <fsm_manual_run+0x128>
		{
			status = INIT;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1)
 8000b5c:	f7ff faf6 	bl	800014c <isButton1Pressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d106      	bne.n	8000b74 <fsm_manual_run+0x140>
		{
			setTimer1(10000);
 8000b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b6a:	f000 fd27 	bl	80015bc <setTimer1>
			status = MODE_1;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b70:	220c      	movs	r2, #12
 8000b72:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1)
 8000b74:	f7ff fafc 	bl	8000170 <isButton2Pressed>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d108      	bne.n	8000b90 <fsm_manual_run+0x15c>
		{
			setTimer1(10000);
 8000b7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b82:	f000 fd1b 	bl	80015bc <setTimer1>
			green++;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <fsm_manual_run+0x194>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <fsm_manual_run+0x194>)
 8000b8e:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 8000b90:	f7ff fb00 	bl	8000194 <isButton3Pressed>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10b      	bne.n	8000bb2 <fsm_manual_run+0x17e>
		{
			status = INIT;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <fsm_manual_run+0x184>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ba0:	e007      	b.n	8000bb2 <fsm_manual_run+0x17e>
	default:
		break;
 8000ba2:	bf00      	nop
 8000ba4:	e006      	b.n	8000bb4 <fsm_manual_run+0x180>
		break;
 8000ba6:	bf00      	nop
 8000ba8:	e004      	b.n	8000bb4 <fsm_manual_run+0x180>
		break;
 8000baa:	bf00      	nop
 8000bac:	e002      	b.n	8000bb4 <fsm_manual_run+0x180>
		break;
 8000bae:	bf00      	nop
 8000bb0:	e000      	b.n	8000bb4 <fsm_manual_run+0x180>
		break;
 8000bb2:	bf00      	nop
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000074 	.word	0x20000074
 8000bbc:	20000078 	.word	0x20000078
 8000bc0:	200000bc 	.word	0x200000bc
 8000bc4:	200000b4 	.word	0x200000b4
 8000bc8:	200000b8 	.word	0x200000b8

08000bcc <fsm_setting_run>:
 */

#include "fsm_setting.h"

void fsm_setting_run()
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	red = green + amber;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <fsm_setting_run+0x1c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <fsm_setting_run+0x20>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <fsm_setting_run+0x24>)
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000b8 	.word	0x200000b8
 8000bec:	200000b4 	.word	0x200000b4
 8000bf0:	200000bc 	.word	0x200000bc

08000bf4 <display7SEG>:
#include "led7_segment.h"

int red, green, amber;

void display7SEG(int num, int substatus)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	if (substatus == 0)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d114      	bne.n	8000c2e <display7SEG+0x3a>
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2102      	movs	r1, #2
 8000c08:	48c2      	ldr	r0, [pc, #776]	; (8000f14 <display7SEG+0x320>)
 8000c0a:	f001 f9d8 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2104      	movs	r1, #4
 8000c12:	48c0      	ldr	r0, [pc, #768]	; (8000f14 <display7SEG+0x320>)
 8000c14:	f001 f9d3 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	48bd      	ldr	r0, [pc, #756]	; (8000f14 <display7SEG+0x320>)
 8000c1e:	f001 f9ce 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2110      	movs	r1, #16
 8000c26:	48bb      	ldr	r0, [pc, #748]	; (8000f14 <display7SEG+0x320>)
 8000c28:	f001 f9c9 	bl	8001fbe <HAL_GPIO_WritePin>
 8000c2c:	e013      	b.n	8000c56 <display7SEG+0x62>
	}
	else
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2102      	movs	r1, #2
 8000c32:	48b8      	ldr	r0, [pc, #736]	; (8000f14 <display7SEG+0x320>)
 8000c34:	f001 f9c3 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	48b5      	ldr	r0, [pc, #724]	; (8000f14 <display7SEG+0x320>)
 8000c3e:	f001 f9be 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2108      	movs	r1, #8
 8000c46:	48b3      	ldr	r0, [pc, #716]	; (8000f14 <display7SEG+0x320>)
 8000c48:	f001 f9b9 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	48b0      	ldr	r0, [pc, #704]	; (8000f14 <display7SEG+0x320>)
 8000c52:	f001 f9b4 	bl	8001fbe <HAL_GPIO_WritePin>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	f200 8183 	bhi.w	8000f64 <display7SEG+0x370>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <display7SEG+0x70>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c8d 	.word	0x08000c8d
 8000c68:	08000cd5 	.word	0x08000cd5
 8000c6c:	08000d1d 	.word	0x08000d1d
 8000c70:	08000d65 	.word	0x08000d65
 8000c74:	08000dad 	.word	0x08000dad
 8000c78:	08000df5 	.word	0x08000df5
 8000c7c:	08000e3d 	.word	0x08000e3d
 8000c80:	08000e85 	.word	0x08000e85
 8000c84:	08000ecd 	.word	0x08000ecd
 8000c88:	08000f1d 	.word	0x08000f1d
	}
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	48a1      	ldr	r0, [pc, #644]	; (8000f18 <display7SEG+0x324>)
 8000c92:	f001 f994 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2102      	movs	r1, #2
 8000c9a:	489f      	ldr	r0, [pc, #636]	; (8000f18 <display7SEG+0x324>)
 8000c9c:	f001 f98f 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	489c      	ldr	r0, [pc, #624]	; (8000f18 <display7SEG+0x324>)
 8000ca6:	f001 f98a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	489a      	ldr	r0, [pc, #616]	; (8000f18 <display7SEG+0x324>)
 8000cb0:	f001 f985 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4897      	ldr	r0, [pc, #604]	; (8000f18 <display7SEG+0x324>)
 8000cba:	f001 f980 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4895      	ldr	r0, [pc, #596]	; (8000f18 <display7SEG+0x324>)
 8000cc4:	f001 f97b 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4892      	ldr	r0, [pc, #584]	; (8000f18 <display7SEG+0x324>)
 8000cce:	f001 f976 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000cd2:	e148      	b.n	8000f66 <display7SEG+0x372>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	488f      	ldr	r0, [pc, #572]	; (8000f18 <display7SEG+0x324>)
 8000cda:	f001 f970 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	488d      	ldr	r0, [pc, #564]	; (8000f18 <display7SEG+0x324>)
 8000ce4:	f001 f96b 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	488a      	ldr	r0, [pc, #552]	; (8000f18 <display7SEG+0x324>)
 8000cee:	f001 f966 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4888      	ldr	r0, [pc, #544]	; (8000f18 <display7SEG+0x324>)
 8000cf8:	f001 f961 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2110      	movs	r1, #16
 8000d00:	4885      	ldr	r0, [pc, #532]	; (8000f18 <display7SEG+0x324>)
 8000d02:	f001 f95c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2120      	movs	r1, #32
 8000d0a:	4883      	ldr	r0, [pc, #524]	; (8000f18 <display7SEG+0x324>)
 8000d0c:	f001 f957 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	4880      	ldr	r0, [pc, #512]	; (8000f18 <display7SEG+0x324>)
 8000d16:	f001 f952 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000d1a:	e124      	b.n	8000f66 <display7SEG+0x372>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	487d      	ldr	r0, [pc, #500]	; (8000f18 <display7SEG+0x324>)
 8000d22:	f001 f94c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	487b      	ldr	r0, [pc, #492]	; (8000f18 <display7SEG+0x324>)
 8000d2c:	f001 f947 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	4878      	ldr	r0, [pc, #480]	; (8000f18 <display7SEG+0x324>)
 8000d36:	f001 f942 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4876      	ldr	r0, [pc, #472]	; (8000f18 <display7SEG+0x324>)
 8000d40:	f001 f93d 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2110      	movs	r1, #16
 8000d48:	4873      	ldr	r0, [pc, #460]	; (8000f18 <display7SEG+0x324>)
 8000d4a:	f001 f938 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	4871      	ldr	r0, [pc, #452]	; (8000f18 <display7SEG+0x324>)
 8000d54:	f001 f933 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	486e      	ldr	r0, [pc, #440]	; (8000f18 <display7SEG+0x324>)
 8000d5e:	f001 f92e 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000d62:	e100      	b.n	8000f66 <display7SEG+0x372>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	486b      	ldr	r0, [pc, #428]	; (8000f18 <display7SEG+0x324>)
 8000d6a:	f001 f928 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4869      	ldr	r0, [pc, #420]	; (8000f18 <display7SEG+0x324>)
 8000d74:	f001 f923 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4866      	ldr	r0, [pc, #408]	; (8000f18 <display7SEG+0x324>)
 8000d7e:	f001 f91e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	4864      	ldr	r0, [pc, #400]	; (8000f18 <display7SEG+0x324>)
 8000d88:	f001 f919 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4861      	ldr	r0, [pc, #388]	; (8000f18 <display7SEG+0x324>)
 8000d92:	f001 f914 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2120      	movs	r1, #32
 8000d9a:	485f      	ldr	r0, [pc, #380]	; (8000f18 <display7SEG+0x324>)
 8000d9c:	f001 f90f 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	485c      	ldr	r0, [pc, #368]	; (8000f18 <display7SEG+0x324>)
 8000da6:	f001 f90a 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000daa:	e0dc      	b.n	8000f66 <display7SEG+0x372>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2101      	movs	r1, #1
 8000db0:	4859      	ldr	r0, [pc, #356]	; (8000f18 <display7SEG+0x324>)
 8000db2:	f001 f904 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4857      	ldr	r0, [pc, #348]	; (8000f18 <display7SEG+0x324>)
 8000dbc:	f001 f8ff 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4854      	ldr	r0, [pc, #336]	; (8000f18 <display7SEG+0x324>)
 8000dc6:	f001 f8fa 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4852      	ldr	r0, [pc, #328]	; (8000f18 <display7SEG+0x324>)
 8000dd0:	f001 f8f5 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	484f      	ldr	r0, [pc, #316]	; (8000f18 <display7SEG+0x324>)
 8000dda:	f001 f8f0 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	484d      	ldr	r0, [pc, #308]	; (8000f18 <display7SEG+0x324>)
 8000de4:	f001 f8eb 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	484a      	ldr	r0, [pc, #296]	; (8000f18 <display7SEG+0x324>)
 8000dee:	f001 f8e6 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000df2:	e0b8      	b.n	8000f66 <display7SEG+0x372>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	4847      	ldr	r0, [pc, #284]	; (8000f18 <display7SEG+0x324>)
 8000dfa:	f001 f8e0 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2102      	movs	r1, #2
 8000e02:	4845      	ldr	r0, [pc, #276]	; (8000f18 <display7SEG+0x324>)
 8000e04:	f001 f8db 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	4842      	ldr	r0, [pc, #264]	; (8000f18 <display7SEG+0x324>)
 8000e0e:	f001 f8d6 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4840      	ldr	r0, [pc, #256]	; (8000f18 <display7SEG+0x324>)
 8000e18:	f001 f8d1 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2110      	movs	r1, #16
 8000e20:	483d      	ldr	r0, [pc, #244]	; (8000f18 <display7SEG+0x324>)
 8000e22:	f001 f8cc 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	483b      	ldr	r0, [pc, #236]	; (8000f18 <display7SEG+0x324>)
 8000e2c:	f001 f8c7 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	4838      	ldr	r0, [pc, #224]	; (8000f18 <display7SEG+0x324>)
 8000e36:	f001 f8c2 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000e3a:	e094      	b.n	8000f66 <display7SEG+0x372>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4835      	ldr	r0, [pc, #212]	; (8000f18 <display7SEG+0x324>)
 8000e42:	f001 f8bc 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4833      	ldr	r0, [pc, #204]	; (8000f18 <display7SEG+0x324>)
 8000e4c:	f001 f8b7 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	4830      	ldr	r0, [pc, #192]	; (8000f18 <display7SEG+0x324>)
 8000e56:	f001 f8b2 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	482e      	ldr	r0, [pc, #184]	; (8000f18 <display7SEG+0x324>)
 8000e60:	f001 f8ad 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	482b      	ldr	r0, [pc, #172]	; (8000f18 <display7SEG+0x324>)
 8000e6a:	f001 f8a8 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	4829      	ldr	r0, [pc, #164]	; (8000f18 <display7SEG+0x324>)
 8000e74:	f001 f8a3 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4826      	ldr	r0, [pc, #152]	; (8000f18 <display7SEG+0x324>)
 8000e7e:	f001 f89e 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000e82:	e070      	b.n	8000f66 <display7SEG+0x372>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4823      	ldr	r0, [pc, #140]	; (8000f18 <display7SEG+0x324>)
 8000e8a:	f001 f898 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2102      	movs	r1, #2
 8000e92:	4821      	ldr	r0, [pc, #132]	; (8000f18 <display7SEG+0x324>)
 8000e94:	f001 f893 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <display7SEG+0x324>)
 8000e9e:	f001 f88e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <display7SEG+0x324>)
 8000ea8:	f001 f889 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <display7SEG+0x324>)
 8000eb2:	f001 f884 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2120      	movs	r1, #32
 8000eba:	4817      	ldr	r0, [pc, #92]	; (8000f18 <display7SEG+0x324>)
 8000ebc:	f001 f87f 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	4814      	ldr	r0, [pc, #80]	; (8000f18 <display7SEG+0x324>)
 8000ec6:	f001 f87a 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000eca:	e04c      	b.n	8000f66 <display7SEG+0x372>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <display7SEG+0x324>)
 8000ed2:	f001 f874 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <display7SEG+0x324>)
 8000edc:	f001 f86f 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <display7SEG+0x324>)
 8000ee6:	f001 f86a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <display7SEG+0x324>)
 8000ef0:	f001 f865 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <display7SEG+0x324>)
 8000efa:	f001 f860 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <display7SEG+0x324>)
 8000f04:	f001 f85b 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <display7SEG+0x324>)
 8000f0e:	f001 f856 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000f12:	e028      	b.n	8000f66 <display7SEG+0x372>
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <display7SEG+0x37c>)
 8000f22:	f001 f84c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <display7SEG+0x37c>)
 8000f2c:	f001 f847 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <display7SEG+0x37c>)
 8000f36:	f001 f842 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <display7SEG+0x37c>)
 8000f40:	f001 f83d 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <display7SEG+0x37c>)
 8000f4a:	f001 f838 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <display7SEG+0x37c>)
 8000f54:	f001 f833 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <display7SEG+0x37c>)
 8000f5e:	f001 f82e 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8000f62:	e000      	b.n	8000f66 <display7SEG+0x372>
		default:
			break;
 8000f64:	bf00      	nop
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <display7SEG_2>:

void display7SEG_2(int num, int substatus)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	if (substatus == 0)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d114      	bne.n	8000fae <display7SEG_2+0x3a>
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2102      	movs	r1, #2
 8000f88:	48c8      	ldr	r0, [pc, #800]	; (80012ac <display7SEG_2+0x338>)
 8000f8a:	f001 f818 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2104      	movs	r1, #4
 8000f92:	48c6      	ldr	r0, [pc, #792]	; (80012ac <display7SEG_2+0x338>)
 8000f94:	f001 f813 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	48c3      	ldr	r0, [pc, #780]	; (80012ac <display7SEG_2+0x338>)
 8000f9e:	f001 f80e 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	48c1      	ldr	r0, [pc, #772]	; (80012ac <display7SEG_2+0x338>)
 8000fa8:	f001 f809 	bl	8001fbe <HAL_GPIO_WritePin>
 8000fac:	e013      	b.n	8000fd6 <display7SEG_2+0x62>
	}
	else
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	48be      	ldr	r0, [pc, #760]	; (80012ac <display7SEG_2+0x338>)
 8000fb4:	f001 f803 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	48bb      	ldr	r0, [pc, #748]	; (80012ac <display7SEG_2+0x338>)
 8000fbe:	f000 fffe 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	48b9      	ldr	r0, [pc, #740]	; (80012ac <display7SEG_2+0x338>)
 8000fc8:	f000 fff9 	bl	8001fbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2110      	movs	r1, #16
 8000fd0:	48b6      	ldr	r0, [pc, #728]	; (80012ac <display7SEG_2+0x338>)
 8000fd2:	f000 fff4 	bl	8001fbe <HAL_GPIO_WritePin>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	f200 81bf 	bhi.w	800135c <display7SEG_2+0x3e8>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <display7SEG_2+0x70>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	0800100d 	.word	0x0800100d
 8000fe8:	08001061 	.word	0x08001061
 8000fec:	080010b5 	.word	0x080010b5
 8000ff0:	08001109 	.word	0x08001109
 8000ff4:	0800115d 	.word	0x0800115d
 8000ff8:	080011b1 	.word	0x080011b1
 8000ffc:	08001205 	.word	0x08001205
 8001000:	08001259 	.word	0x08001259
 8001004:	080012b5 	.word	0x080012b5
 8001008:	08001309 	.word	0x08001309
	}
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	48a7      	ldr	r0, [pc, #668]	; (80012b0 <display7SEG_2+0x33c>)
 8001012:	f000 ffd4 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	48a4      	ldr	r0, [pc, #656]	; (80012b0 <display7SEG_2+0x33c>)
 800101e:	f000 ffce 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	48a1      	ldr	r0, [pc, #644]	; (80012b0 <display7SEG_2+0x33c>)
 800102a:	f000 ffc8 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	489e      	ldr	r0, [pc, #632]	; (80012b0 <display7SEG_2+0x33c>)
 8001036:	f000 ffc2 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	489b      	ldr	r0, [pc, #620]	; (80012b0 <display7SEG_2+0x33c>)
 8001042:	f000 ffbc 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	4898      	ldr	r0, [pc, #608]	; (80012b0 <display7SEG_2+0x33c>)
 800104e:	f000 ffb6 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001058:	4895      	ldr	r0, [pc, #596]	; (80012b0 <display7SEG_2+0x33c>)
 800105a:	f000 ffb0 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 800105e:	e17e      	b.n	800135e <display7SEG_2+0x3ea>
		case 1:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	4892      	ldr	r0, [pc, #584]	; (80012b0 <display7SEG_2+0x33c>)
 8001066:	f000 ffaa 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	488f      	ldr	r0, [pc, #572]	; (80012b0 <display7SEG_2+0x33c>)
 8001072:	f000 ffa4 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107c:	488c      	ldr	r0, [pc, #560]	; (80012b0 <display7SEG_2+0x33c>)
 800107e:	f000 ff9e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	4889      	ldr	r0, [pc, #548]	; (80012b0 <display7SEG_2+0x33c>)
 800108a:	f000 ff98 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	4886      	ldr	r0, [pc, #536]	; (80012b0 <display7SEG_2+0x33c>)
 8001096:	f000 ff92 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a0:	4883      	ldr	r0, [pc, #524]	; (80012b0 <display7SEG_2+0x33c>)
 80010a2:	f000 ff8c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ac:	4880      	ldr	r0, [pc, #512]	; (80012b0 <display7SEG_2+0x33c>)
 80010ae:	f000 ff86 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 80010b2:	e154      	b.n	800135e <display7SEG_2+0x3ea>
		case 2:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	487d      	ldr	r0, [pc, #500]	; (80012b0 <display7SEG_2+0x33c>)
 80010ba:	f000 ff80 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	487a      	ldr	r0, [pc, #488]	; (80012b0 <display7SEG_2+0x33c>)
 80010c6:	f000 ff7a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4877      	ldr	r0, [pc, #476]	; (80012b0 <display7SEG_2+0x33c>)
 80010d2:	f000 ff74 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	4874      	ldr	r0, [pc, #464]	; (80012b0 <display7SEG_2+0x33c>)
 80010de:	f000 ff6e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	4871      	ldr	r0, [pc, #452]	; (80012b0 <display7SEG_2+0x33c>)
 80010ea:	f000 ff68 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	486e      	ldr	r0, [pc, #440]	; (80012b0 <display7SEG_2+0x33c>)
 80010f6:	f000 ff62 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001100:	486b      	ldr	r0, [pc, #428]	; (80012b0 <display7SEG_2+0x33c>)
 8001102:	f000 ff5c 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8001106:	e12a      	b.n	800135e <display7SEG_2+0x3ea>
		case 3:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	4868      	ldr	r0, [pc, #416]	; (80012b0 <display7SEG_2+0x33c>)
 800110e:	f000 ff56 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	4865      	ldr	r0, [pc, #404]	; (80012b0 <display7SEG_2+0x33c>)
 800111a:	f000 ff50 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	4862      	ldr	r0, [pc, #392]	; (80012b0 <display7SEG_2+0x33c>)
 8001126:	f000 ff4a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001130:	485f      	ldr	r0, [pc, #380]	; (80012b0 <display7SEG_2+0x33c>)
 8001132:	f000 ff44 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113c:	485c      	ldr	r0, [pc, #368]	; (80012b0 <display7SEG_2+0x33c>)
 800113e:	f000 ff3e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4859      	ldr	r0, [pc, #356]	; (80012b0 <display7SEG_2+0x33c>)
 800114a:	f000 ff38 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4856      	ldr	r0, [pc, #344]	; (80012b0 <display7SEG_2+0x33c>)
 8001156:	f000 ff32 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 800115a:	e100      	b.n	800135e <display7SEG_2+0x3ea>
		case 4:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4853      	ldr	r0, [pc, #332]	; (80012b0 <display7SEG_2+0x33c>)
 8001162:	f000 ff2c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4850      	ldr	r0, [pc, #320]	; (80012b0 <display7SEG_2+0x33c>)
 800116e:	f000 ff26 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	484d      	ldr	r0, [pc, #308]	; (80012b0 <display7SEG_2+0x33c>)
 800117a:	f000 ff20 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	484a      	ldr	r0, [pc, #296]	; (80012b0 <display7SEG_2+0x33c>)
 8001186:	f000 ff1a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	4847      	ldr	r0, [pc, #284]	; (80012b0 <display7SEG_2+0x33c>)
 8001192:	f000 ff14 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	4844      	ldr	r0, [pc, #272]	; (80012b0 <display7SEG_2+0x33c>)
 800119e:	f000 ff0e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	4841      	ldr	r0, [pc, #260]	; (80012b0 <display7SEG_2+0x33c>)
 80011aa:	f000 ff08 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 80011ae:	e0d6      	b.n	800135e <display7SEG_2+0x3ea>
		case 5:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	483e      	ldr	r0, [pc, #248]	; (80012b0 <display7SEG_2+0x33c>)
 80011b6:	f000 ff02 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	483b      	ldr	r0, [pc, #236]	; (80012b0 <display7SEG_2+0x33c>)
 80011c2:	f000 fefc 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	4838      	ldr	r0, [pc, #224]	; (80012b0 <display7SEG_2+0x33c>)
 80011ce:	f000 fef6 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	4835      	ldr	r0, [pc, #212]	; (80012b0 <display7SEG_2+0x33c>)
 80011da:	f000 fef0 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	4832      	ldr	r0, [pc, #200]	; (80012b0 <display7SEG_2+0x33c>)
 80011e6:	f000 feea 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f0:	482f      	ldr	r0, [pc, #188]	; (80012b0 <display7SEG_2+0x33c>)
 80011f2:	f000 fee4 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	482c      	ldr	r0, [pc, #176]	; (80012b0 <display7SEG_2+0x33c>)
 80011fe:	f000 fede 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8001202:	e0ac      	b.n	800135e <display7SEG_2+0x3ea>
		case 6:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4829      	ldr	r0, [pc, #164]	; (80012b0 <display7SEG_2+0x33c>)
 800120a:	f000 fed8 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <display7SEG_2+0x33c>)
 8001216:	f000 fed2 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <display7SEG_2+0x33c>)
 8001222:	f000 fecc 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122c:	4820      	ldr	r0, [pc, #128]	; (80012b0 <display7SEG_2+0x33c>)
 800122e:	f000 fec6 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001238:	481d      	ldr	r0, [pc, #116]	; (80012b0 <display7SEG_2+0x33c>)
 800123a:	f000 fec0 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <display7SEG_2+0x33c>)
 8001246:	f000 feba 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4817      	ldr	r0, [pc, #92]	; (80012b0 <display7SEG_2+0x33c>)
 8001252:	f000 feb4 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8001256:	e082      	b.n	800135e <display7SEG_2+0x3ea>
		case 7:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4814      	ldr	r0, [pc, #80]	; (80012b0 <display7SEG_2+0x33c>)
 800125e:	f000 feae 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <display7SEG_2+0x33c>)
 800126a:	f000 fea8 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <display7SEG_2+0x33c>)
 8001276:	f000 fea2 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <display7SEG_2+0x33c>)
 8001282:	f000 fe9c 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <display7SEG_2+0x33c>)
 800128e:	f000 fe96 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <display7SEG_2+0x33c>)
 800129a:	f000 fe90 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <display7SEG_2+0x33c>)
 80012a6:	f000 fe8a 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 80012aa:	e058      	b.n	800135e <display7SEG_2+0x3ea>
 80012ac:	40010800 	.word	0x40010800
 80012b0:	40010c00 	.word	0x40010c00
		case 8:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	482b      	ldr	r0, [pc, #172]	; (8001368 <display7SEG_2+0x3f4>)
 80012ba:	f000 fe80 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	4828      	ldr	r0, [pc, #160]	; (8001368 <display7SEG_2+0x3f4>)
 80012c6:	f000 fe7a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	4825      	ldr	r0, [pc, #148]	; (8001368 <display7SEG_2+0x3f4>)
 80012d2:	f000 fe74 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012dc:	4822      	ldr	r0, [pc, #136]	; (8001368 <display7SEG_2+0x3f4>)
 80012de:	f000 fe6e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <display7SEG_2+0x3f4>)
 80012ea:	f000 fe68 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f4:	481c      	ldr	r0, [pc, #112]	; (8001368 <display7SEG_2+0x3f4>)
 80012f6:	f000 fe62 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <display7SEG_2+0x3f4>)
 8001302:	f000 fe5c 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 8001306:	e02a      	b.n	800135e <display7SEG_2+0x3ea>
		case 9:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <display7SEG_2+0x3f4>)
 800130e:	f000 fe56 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <display7SEG_2+0x3f4>)
 800131a:	f000 fe50 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <display7SEG_2+0x3f4>)
 8001326:	f000 fe4a 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <display7SEG_2+0x3f4>)
 8001332:	f000 fe44 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <display7SEG_2+0x3f4>)
 800133e:	f000 fe3e 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <display7SEG_2+0x3f4>)
 800134a:	f000 fe38 	bl	8001fbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <display7SEG_2+0x3f4>)
 8001356:	f000 fe32 	bl	8001fbe <HAL_GPIO_WritePin>
			break;
 800135a:	e000      	b.n	800135e <display7SEG_2+0x3ea>
		default:
			break;
 800135c:	bf00      	nop
	}
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010c00 	.word	0x40010c00

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001370:	f000 fb24 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001374:	f000 f824 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001378:	f000 f8aa 	bl	80014d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800137c:	f000 f85c 	bl	8001438 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <main+0x40>)
 8001382:	f001 fa61 	bl	8002848 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <main+0x44>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  red = 5, green = 3, amber = 2;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <main+0x48>)
 800138e:	2205      	movs	r2, #5
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <main+0x4c>)
 8001394:	2203      	movs	r2, #3
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <main+0x50>)
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 800139e:	f7fe ffb3 	bl	8000308 <fsm_automatic_run>
	  fsm_manual_run();
 80013a2:	f7ff fb47 	bl	8000a34 <fsm_manual_run>
	  fsm_setting_run();
 80013a6:	f7ff fc11 	bl	8000bcc <fsm_setting_run>
	  fsm_automatic_run();
 80013aa:	e7f8      	b.n	800139e <main+0x32>
 80013ac:	200000c0 	.word	0x200000c0
 80013b0:	20000074 	.word	0x20000074
 80013b4:	200000bc 	.word	0x200000bc
 80013b8:	200000b8 	.word	0x200000b8
 80013bc:	200000b4 	.word	0x200000b4

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	; 0x40
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2228      	movs	r2, #40	; 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fdea 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fdfa 	bl	8001ff0 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001402:	f000 f8d5 	bl	80015b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f866 	bl	80024f0 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800142a:	f000 f8c1 	bl	80015b0 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3740      	adds	r7, #64	; 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM2_Init+0x94>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_TIM2_Init+0x94>)
 800145e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_TIM2_Init+0x94>)
 800146c:	2209      	movs	r2, #9
 800146e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM2_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_TIM2_Init+0x94>)
 800147e:	f001 f993 	bl	80027a8 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 f892 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_TIM2_Init+0x94>)
 800149a:	f001 fb11 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f884 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM2_Init+0x94>)
 80014b6:	f001 fce9 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 f876 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000c0 	.word	0x200000c0

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_GPIO_Init+0xbc>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <MX_GPIO_Init+0xbc>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_GPIO_Init+0xbc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_GPIO_Init+0xbc>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <MX_GPIO_Init+0xbc>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_GPIO_Init+0xbc>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001514:	2200      	movs	r2, #0
 8001516:	f640 71fe 	movw	r1, #4094	; 0xffe
 800151a:	481d      	ldr	r0, [pc, #116]	; (8001590 <MX_GPIO_Init+0xc0>)
 800151c:	f000 fd4f 	bl	8001fbe <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8001520:	2200      	movs	r2, #0
 8001522:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001526:	481b      	ldr	r0, [pc, #108]	; (8001594 <MX_GPIO_Init+0xc4>)
 8001528:	f000 fd49 	bl	8001fbe <HAL_GPIO_WritePin>
                          |SEG8_Pin|SEG9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800152c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001530:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2302      	movs	r3, #2
 800153c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4619      	mov	r1, r3
 8001544:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_GPIO_Init+0xc0>)
 8001546:	f000 fba9 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 800154a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800154e:	60bb      	str	r3, [r7, #8]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2302      	movs	r3, #2
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0xc4>)
 8001564:	f000 fb9a 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001568:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800156c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_GPIO_Init+0xc0>)
 800157e:	f000 fb8d 	bl	8001c9c <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00

08001598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	timerRun();
 80015a0:	f000 f85a 	bl	8001658 <timerRun>
	getKeyInput();
 80015a4:	f7fe fe18 	bl	80001d8 <getKeyInput>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <setTimer1>:
int timer2_counter = 1;
int timer3_counter = 1;
int TIMER_CYCLE = 10;

void setTimer1(int duration)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <setTimer1+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <setTimer1+0x2c>)
 80015d0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <setTimer1+0x30>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000040 	.word	0x20000040
 80015e8:	20000034 	.word	0x20000034
 80015ec:	20000078 	.word	0x20000078

080015f0 <setTimer2>:

void setTimer2(int duration)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <setTimer2+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <setTimer2+0x2c>)
 8001604:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <setTimer2+0x30>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000040 	.word	0x20000040
 800161c:	20000038 	.word	0x20000038
 8001620:	2000007c 	.word	0x2000007c

08001624 <setTimer3>:

void setTimer3(int duration)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <setTimer3+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	fb92 f3f3 	sdiv	r3, r2, r3
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <setTimer3+0x2c>)
 8001638:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <setTimer3+0x30>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000040 	.word	0x20000040
 8001650:	2000003c 	.word	0x2000003c
 8001654:	20000080 	.word	0x20000080

08001658 <timerRun>:

void timerRun()
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	if (timer1_counter == 0)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <timerRun+0x54>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <timerRun+0x12>
	{
		timer1_flag = 1;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <timerRun+0x58>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter == 0)
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <timerRun+0x5c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <timerRun+0x20>
	{
		timer2_flag = 1;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <timerRun+0x60>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter == 0)
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <timerRun+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <timerRun+0x2e>
	{
		timer3_flag = 1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <timerRun+0x68>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
	}
	timer1_counter--;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <timerRun+0x54>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <timerRun+0x54>)
 800168e:	6013      	str	r3, [r2, #0]
	timer2_counter--;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <timerRun+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <timerRun+0x5c>)
 8001698:	6013      	str	r3, [r2, #0]
	timer3_counter--;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <timerRun+0x64>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <timerRun+0x64>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20000034 	.word	0x20000034
 80016b0:	20000078 	.word	0x20000078
 80016b4:	20000038 	.word	0x20000038
 80016b8:	2000007c 	.word	0x2000007c
 80016bc:	2000003c 	.word	0x2000003c
 80016c0:	20000080 	.word	0x20000080

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_MspInit+0x5c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_MspInit+0x5c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x5c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_MspInit+0x5c>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_MspInit+0x60>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_MspInit+0x60>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d113      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fa69 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fa82 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f947 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM2_IRQHandler+0x10>)
 80017c6:	f001 f88b 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000c0 	.word	0x200000c0

080017d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <OffLight>:
 */

#include "traffic_light.h"

void OffLight()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <OffLight+0x4c>)
 80017ea:	f000 fbe8 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <OffLight+0x4c>)
 80017f4:	f000 fbe3 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <OffLight+0x4c>)
 8001800:	f000 fbdd 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <OffLight+0x4c>)
 800180c:	f000 fbd7 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <OffLight+0x4c>)
 8001818:	f000 fbd1 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <OffLight+0x4c>)
 8001824:	f000 fbcb 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010800 	.word	0x40010800

08001830 <RedGreen>:

void RedGreen()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	4810      	ldr	r0, [pc, #64]	; (800187c <RedGreen+0x4c>)
 800183a:	f000 fbc0 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <RedGreen+0x4c>)
 8001844:	f000 fbbb 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <RedGreen+0x4c>)
 8001850:	f000 fbb5 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <RedGreen+0x4c>)
 800185c:	f000 fbaf 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <RedGreen+0x4c>)
 8001868:	f000 fba9 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <RedGreen+0x4c>)
 8001874:	f000 fba3 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010800 	.word	0x40010800

08001880 <RedAmber>:

void RedAmber()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <RedAmber+0x4c>)
 800188a:	f000 fb98 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <RedAmber+0x4c>)
 8001894:	f000 fb93 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <RedAmber+0x4c>)
 80018a0:	f000 fb8d 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <RedAmber+0x4c>)
 80018ac:	f000 fb87 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <RedAmber+0x4c>)
 80018b8:	f000 fb81 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c2:	4802      	ldr	r0, [pc, #8]	; (80018cc <RedAmber+0x4c>)
 80018c4:	f000 fb7b 	bl	8001fbe <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40010800 	.word	0x40010800

080018d0 <GreenRed>:


void GreenRed()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	2140      	movs	r1, #64	; 0x40
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <GreenRed+0x4c>)
 80018da:	f000 fb70 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	480e      	ldr	r0, [pc, #56]	; (800191c <GreenRed+0x4c>)
 80018e4:	f000 fb6b 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <GreenRed+0x4c>)
 80018f0:	f000 fb65 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fa:	4808      	ldr	r0, [pc, #32]	; (800191c <GreenRed+0x4c>)
 80018fc:	f000 fb5f 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <GreenRed+0x4c>)
 8001908:	f000 fb59 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001912:	4802      	ldr	r0, [pc, #8]	; (800191c <GreenRed+0x4c>)
 8001914:	f000 fb53 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010800 	.word	0x40010800

08001920 <AmberRed>:

void AmberRed()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2140      	movs	r1, #64	; 0x40
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <AmberRed+0x4c>)
 800192a:	f000 fb48 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <AmberRed+0x4c>)
 8001934:	f000 fb43 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193e:	480b      	ldr	r0, [pc, #44]	; (800196c <AmberRed+0x4c>)
 8001940:	f000 fb3d 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <AmberRed+0x4c>)
 800194c:	f000 fb37 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <AmberRed+0x4c>)
 8001958:	f000 fb31 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001962:	4802      	ldr	r0, [pc, #8]	; (800196c <AmberRed+0x4c>)
 8001964:	f000 fb2b 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010800 	.word	0x40010800

08001970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001970:	f7ff ff30 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001976:	490c      	ldr	r1, [pc, #48]	; (80019a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001978:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800198c:	4c09      	ldr	r4, [pc, #36]	; (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199a:	f001 fae1 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7ff fce5 	bl	800136c <main>
  bx lr
 80019a2:	4770      	bx	lr
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80019ac:	08002ffc 	.word	0x08002ffc
  ldr r2, =_sbss
 80019b0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80019b4:	2000010c 	.word	0x2000010c

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_Init+0x28>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_Init+0x28>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f923 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f808 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d8:	f7ff fe74 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f93b 	bl	8001c82 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f903 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_InitTick+0x5c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000044 	.word	0x20000044
 8001a40:	2000004c 	.word	0x2000004c
 8001a44:	20000048 	.word	0x20000048

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	2000004c 	.word	0x2000004c
 8001a68:	20000108 	.word	0x20000108

08001a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000108 	.word	0x20000108

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4906      	ldr	r1, [pc, #24]	; (8001b18 <__NVIC_EnableIRQ+0x34>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff90 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff2d 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff42 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff90 	bl	8001b70 <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5f 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff35 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b08b      	sub	sp, #44	; 0x2c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	e148      	b.n	8001f42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8137 	bne.w	8001f3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4aa3      	ldr	r2, [pc, #652]	; (8001f60 <HAL_GPIO_Init+0x2c4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d05e      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cd8:	4aa1      	ldr	r2, [pc, #644]	; (8001f60 <HAL_GPIO_Init+0x2c4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d875      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cde:	4aa1      	ldr	r2, [pc, #644]	; (8001f64 <HAL_GPIO_Init+0x2c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d058      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001ce4:	4a9f      	ldr	r2, [pc, #636]	; (8001f64 <HAL_GPIO_Init+0x2c8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d86f      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cea:	4a9f      	ldr	r2, [pc, #636]	; (8001f68 <HAL_GPIO_Init+0x2cc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d052      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cf0:	4a9d      	ldr	r2, [pc, #628]	; (8001f68 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d869      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cf6:	4a9d      	ldr	r2, [pc, #628]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d04c      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cfc:	4a9b      	ldr	r2, [pc, #620]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d863      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d02:	4a9b      	ldr	r2, [pc, #620]	; (8001f70 <HAL_GPIO_Init+0x2d4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d046      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001d08:	4a99      	ldr	r2, [pc, #612]	; (8001f70 <HAL_GPIO_Init+0x2d4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d85d      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d82a      	bhi.n	8001d68 <HAL_GPIO_Init+0xcc>
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d859      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <HAL_GPIO_Init+0x80>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d83 	.word	0x08001d83
 8001d28:	08001dc5 	.word	0x08001dc5
 8001d2c:	08001dcb 	.word	0x08001dcb
 8001d30:	08001dcb 	.word	0x08001dcb
 8001d34:	08001dcb 	.word	0x08001dcb
 8001d38:	08001dcb 	.word	0x08001dcb
 8001d3c:	08001dcb 	.word	0x08001dcb
 8001d40:	08001dcb 	.word	0x08001dcb
 8001d44:	08001dcb 	.word	0x08001dcb
 8001d48:	08001dcb 	.word	0x08001dcb
 8001d4c:	08001dcb 	.word	0x08001dcb
 8001d50:	08001dcb 	.word	0x08001dcb
 8001d54:	08001dcb 	.word	0x08001dcb
 8001d58:	08001dcb 	.word	0x08001dcb
 8001d5c:	08001dcb 	.word	0x08001dcb
 8001d60:	08001d79 	.word	0x08001d79
 8001d64:	08001d8d 	.word	0x08001d8d
 8001d68:	4a82      	ldr	r2, [pc, #520]	; (8001f74 <HAL_GPIO_Init+0x2d8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d6e:	e02c      	b.n	8001dca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e029      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e024      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	3308      	adds	r3, #8
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e01f      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	330c      	adds	r3, #12
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e01a      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e013      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	611a      	str	r2, [r3, #16]
          break;
 8001db6:	e009      	b.n	8001dcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db8:	2308      	movs	r3, #8
 8001dba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	615a      	str	r2, [r3, #20]
          break;
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
          break;
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          break;
 8001dca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d801      	bhi.n	8001dd6 <HAL_GPIO_Init+0x13a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_Init+0x13e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d802      	bhi.n	8001de8 <HAL_GPIO_Init+0x14c>
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x152>
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	3b08      	subs	r3, #8
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	210f      	movs	r1, #15
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	6a39      	ldr	r1, [r7, #32]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8090 	beq.w	8001f3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_GPIO_Init+0x2e0>)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1e0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1dc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1d8>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1e2>
 8001e74:	2303      	movs	r3, #3
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1e2>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1e2>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8e:	493b      	ldr	r1, [pc, #236]	; (8001f7c <HAL_GPIO_Init+0x2e0>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea8:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4933      	ldr	r1, [pc, #204]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	492d      	ldr	r1, [pc, #180]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4929      	ldr	r1, [pc, #164]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4923      	ldr	r1, [pc, #140]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4919      	ldr	r1, [pc, #100]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4915      	ldr	r1, [pc, #84]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3301      	adds	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f aeaf 	bne.w	8001cb0 <HAL_GPIO_Init+0x14>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	372c      	adds	r7, #44	; 0x2c
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	10320000 	.word	0x10320000
 8001f64:	10310000 	.word	0x10310000
 8001f68:	10220000 	.word	0x10220000
 8001f6c:	10210000 	.word	0x10210000
 8001f70:	10120000 	.word	0x10120000
 8001f74:	10110000 	.word	0x10110000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fce:	787b      	ldrb	r3, [r7, #1]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	611a      	str	r2, [r3, #16]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e26c      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4b8f      	ldr	r3, [pc, #572]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d112      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
 8002028:	4b8c      	ldr	r3, [pc, #560]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06c      	beq.n	800211c <HAL_RCC_OscConfig+0x12c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d168      	bne.n	800211c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e246      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x76>
 8002058:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e02e      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b7b      	ldr	r3, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a77      	ldr	r2, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0xbc>
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fcce 	bl	8001a6c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fcca 	bl	8001a6c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1fa      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fcba 	bl	8001a6c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fcb6 	bl	8001a6c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1e6      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x10c>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1ba      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4939      	ldr	r1, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff fc6f 	bl	8001a6c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fc6b 	bl	8001a6c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e19b      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fc4e 	bl	8001a6c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff fc4a 	bl	8001a6c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e17a      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03a      	beq.n	8002274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7ff fc2e 	bl	8001a6c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff fc2a 	bl	8001a6c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e15a      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 fa9a 	bl	800276c <RCC_Delay>
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7ff fc14 	bl	8001a6c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7ff fc10 	bl	8001a6c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d908      	bls.n	8002268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e140      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b9e      	ldr	r3, [pc, #632]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a6 	beq.w	80023ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a93      	ldr	r2, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b91      	ldr	r3, [pc, #580]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b8e      	ldr	r3, [pc, #568]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a8a      	ldr	r2, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fbd1 	bl	8001a6c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff fbcd 	bl	8001a6c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0fd      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x334>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x356>
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff fb81 	bl	8001a6c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff fb7d 	bl	8001a6c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0ab      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x37e>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff fb6b 	bl	8001a6c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff fb67 	bl	8001a6c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e095      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a47      	ldr	r2, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8081 	beq.w	80024da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d061      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d146      	bne.n	800247a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fb3b 	bl	8001a6c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7ff fb37 	bl	8001a6c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e067      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	492d      	ldr	r1, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a19      	ldr	r1, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	430b      	orrs	r3, r1
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fb0b 	bl	8001a6c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fb07 	bl	8001a6c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e037      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
 8002478:	e02f      	b.n	80024da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff faf4 	bl	8001a6c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7ff faf0 	bl	8001a6c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e020      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
 80024a6:	e018      	b.n	80024da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
 80024ec:	42420060 	.word	0x42420060

080024f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d0      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4965      	ldr	r1, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800256e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d040      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e073      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4936      	ldr	r1, [pc, #216]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff fa44 	bl	8001a6c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7ff fa40 	bl	8001a6c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e053      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d210      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4922      	ldr	r1, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1cc>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1d0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f9a2 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08002fd0 	.word	0x08002fd0
 80026bc:	20000044 	.word	0x20000044
 80026c0:	20000048 	.word	0x20000048

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x36>
 80026f2:	e027      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	e027      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a17      	ldr	r2, [pc, #92]	; (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0c5b      	lsrs	r3, r3, #17
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_RCC_GetSysClockFreq+0xa0>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	fb02 f203 	mul.w	r2, r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e004      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	613b      	str	r3, [r7, #16]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	693b      	ldr	r3, [r7, #16]
}
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	08002fe0 	.word	0x08002fe0
 8002764:	08002ff0 	.word	0x08002ff0
 8002768:	003d0900 	.word	0x003d0900

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000044 	.word	0x20000044
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe ffaa 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fa56 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e035      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_Base_Start_IT+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d004      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_Base_Start_IT+0x94>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d010      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	e007      	b.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0202 	mvn.w	r2, #2
 8002914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f998 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f98b 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f99a 	bl	8002c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d020      	beq.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f972 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f965 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f974 	bl	8002c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d020      	beq.n	80029dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f94c 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f93f 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f94e 	bl	8002c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0210 	mvn.w	r2, #16
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2208      	movs	r2, #8
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f926 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f919 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f928 	bl	8002c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0201 	mvn.w	r2, #1
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe fda6 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa6f 	bl	8002f4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8f8 	bl	8002c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0220 	mvn.w	r2, #32
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa42 	bl	8002f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_ConfigClockSource+0x1c>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0b4      	b.n	8002c46 <HAL_TIM_ConfigClockSource+0x186>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b14:	d03e      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0xd4>
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	f200 8087 	bhi.w	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_TIM_ConfigClockSource+0x172>
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	d87f      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b70      	cmp	r3, #112	; 0x70
 8002b2e:	d01a      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xa6>
 8002b30:	2b70      	cmp	r3, #112	; 0x70
 8002b32:	d87b      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b60      	cmp	r3, #96	; 0x60
 8002b36:	d050      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x11a>
 8002b38:	2b60      	cmp	r3, #96	; 0x60
 8002b3a:	d877      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b50      	cmp	r3, #80	; 0x50
 8002b3e:	d03c      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0xfa>
 8002b40:	2b50      	cmp	r3, #80	; 0x50
 8002b42:	d873      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d058      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x13a>
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d86f      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d064      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b50:	2b30      	cmp	r3, #48	; 0x30
 8002b52:	d86b      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d060      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d867      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05c      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d05a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	e062      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f000 f96a 	bl	8002e4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]
      break;
 8002b92:	e04f      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f000 f953 	bl	8002e4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb6:	609a      	str	r2, [r3, #8]
      break;
 8002bb8:	e03c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 f8ca 	bl	8002d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2150      	movs	r1, #80	; 0x50
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f921 	bl	8002e1a <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e02c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 f8e8 	bl	8002dbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2160      	movs	r1, #96	; 0x60
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f911 	bl	8002e1a <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e01c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 f8aa 	bl	8002d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f901 	bl	8002e1a <TIM_ITRx_SetConfig>
      break;
 8002c18:	e00c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f000 f8f8 	bl	8002e1a <TIM_ITRx_SetConfig>
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <TIM_Base_SetConfig+0xc0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <TIM_Base_SetConfig+0x28>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x28>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <TIM_Base_SetConfig+0xc4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <TIM_Base_SetConfig+0xc0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0x52>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0x52>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <TIM_Base_SetConfig+0xc4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <TIM_Base_SetConfig+0xc0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400

08002d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 030a 	bic.w	r3, r3, #10
 8002d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0210 	bic.w	r2, r3, #16
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	031b      	lsls	r3, r3, #12
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	621a      	str	r2, [r3, #32]
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 0307 	orr.w	r3, r3, #7
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	609a      	str	r2, [r3, #8]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b087      	sub	sp, #28
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	021a      	lsls	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	609a      	str	r2, [r3, #8]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e041      	b.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d004      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10c      	bne.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40000400 	.word	0x40000400

08002f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	2600      	movs	r6, #0
 8002f64:	4d0c      	ldr	r5, [pc, #48]	; (8002f98 <__libc_init_array+0x38>)
 8002f66:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <__libc_init_array+0x3c>)
 8002f68:	1b64      	subs	r4, r4, r5
 8002f6a:	10a4      	asrs	r4, r4, #2
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	f000 f822 	bl	8002fb8 <_init>
 8002f74:	2600      	movs	r6, #0
 8002f76:	4d0a      	ldr	r5, [pc, #40]	; (8002fa0 <__libc_init_array+0x40>)
 8002f78:	4c0a      	ldr	r4, [pc, #40]	; (8002fa4 <__libc_init_array+0x44>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	08002ff4 	.word	0x08002ff4
 8002f9c:	08002ff4 	.word	0x08002ff4
 8002fa0:	08002ff4 	.word	0x08002ff4
 8002fa4:	08002ff8 	.word	0x08002ff8

08002fa8 <memset>:
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4402      	add	r2, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
